{
  "version": 3,
  "sources": [
    "test.js"
  ],
  "names": [
    "wsshell",
    "require",
    "dial",
    "url",
    "tty",
    "process",
    "stdout",
    "isTTY",
    "command",
    "shell",
    "stdin",
    "setRawMode",
    "on",
    "resize",
    "columns",
    "rows",
    "pipe",
    "stderr",
    "kill",
    "exit",
    "success",
    "catch",
    "console",
    "log",
    "err"
  ],
  "mappings": ";;;;;;;;;;;;AAAA,IAAIA,UAAUC,QAAQ,IAAR,CAAd;;AAEA,2DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACmBD,QAAQE,IAAR,CAAa;AAC7BC,iBAAU,sBADmB;AAE7BC,iBAAUC,QAAQC,MAAR,CAAeC,KAFI;AAG7BC,qBAAU,CAAC,MAAD;AAHmB,WAAb,CADnB;;AAAA;AACKC,eADL;;;AAOC,cAAIJ,QAAQC,MAAR,CAAeC,KAAnB,EAA0B;AACxBF,oBAAQK,KAAR,CAAcC,UAAd,CAAyB,IAAzB;AACAN,oBAAQC,MAAR,CAAeM,EAAf,CAAkB,QAAlB,EAA4B,YAAM;AAChCH,oBAAMI,MAAN,CAAaR,QAAQC,MAAR,CAAeQ,OAA5B,EAAqCT,QAAQC,MAAR,CAAeS,IAApD;AACD,aAFD;AAGAN,kBAAMI,MAAN,CAAaR,QAAQC,MAAR,CAAeQ,OAA5B,EAAqCT,QAAQC,MAAR,CAAeS,IAApD;AACD;;AAEDN,gBAAMH,MAAN,CAAaU,IAAb,CAAkBX,QAAQC,MAA1B;AACAG,gBAAMQ,MAAN,CAAaD,IAAb,CAAkBX,QAAQY,MAA1B;AACAZ,kBAAQK,KAAR,CAAcM,IAAd,CAAmBP,MAAMC,KAAzB;;AAEAL,kBAAQO,EAAR,CAAW,QAAX,EAAqB;AAAA,mBAAMH,MAAMS,IAAN,EAAN;AAAA,WAArB;;AAEAT,gBAAMG,EAAN,CAAS,MAAT,EAAiB,mBAAW;AAC1B,gBAAIP,QAAQC,MAAR,CAAeC,KAAnB,EAA0B;AACxBF,sBAAQK,KAAR,CAAcC,UAAd,CAAyB,KAAzB;AACD;AACDN,oBAAQc,IAAR,CAAaC,UAAU,CAAV,GAAc,CAA3B;AACD,WALD;;AArBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,KA4BKC,KA5BL,CA4BW;AAAA,SAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,CA5BX",
  "file": "test.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "let wsshell = require('./');\n\n(async () => {\n  let shell = await wsshell.dial({\n    url:      'ws://127.0.0.1:2222/',\n    tty:      process.stdout.isTTY,\n    command:  [\"bash\"],\n  });\n\n  if (process.stdout.isTTY) {\n    process.stdin.setRawMode(true);\n    process.stdout.on('resize', () => {\n      shell.resize(process.stdout.columns, process.stdout.rows);\n    });\n    shell.resize(process.stdout.columns, process.stdout.rows);\n  }\n\n  shell.stdout.pipe(process.stdout);\n  shell.stderr.pipe(process.stderr);\n  process.stdin.pipe(shell.stdin);\n\n  process.on('SIGINT', () => shell.kill());\n\n  shell.on('exit', success => {\n    if (process.stdout.isTTY) {\n      process.stdin.setRawMode(false);\n    }\n    process.exit(success ? 0 : 1);\n  });\n\n})().catch(err => console.log(err));\n"
  ]
}
