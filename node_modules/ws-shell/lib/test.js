'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var wsshell = require('./');

(0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
  var shell;
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return wsshell.dial({
            url: 'ws://127.0.0.1:2222/',
            tty: process.stdout.isTTY,
            command: ["bash"]
          });

        case 2:
          shell = _context.sent;


          if (process.stdout.isTTY) {
            process.stdin.setRawMode(true);
            process.stdout.on('resize', function () {
              shell.resize(process.stdout.columns, process.stdout.rows);
            });
            shell.resize(process.stdout.columns, process.stdout.rows);
          }

          shell.stdout.pipe(process.stdout);
          shell.stderr.pipe(process.stderr);
          process.stdin.pipe(shell.stdin);

          process.on('SIGINT', function () {
            return shell.kill();
          });

          shell.on('exit', function (success) {
            if (process.stdout.isTTY) {
              process.stdin.setRawMode(false);
            }
            process.exit(success ? 0 : 1);
          });

        case 9:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}))().catch(function (err) {
  return console.log(err);
});
//# sourceMappingURL=test.js.map
