{
  "version": 3,
  "sources": [
    "server.js"
  ],
  "names": [
    "debug",
    "require",
    "msgcodes",
    "events",
    "_",
    "querystring",
    "stream",
    "through2",
    "MAX_OUTSTANDING",
    "MAX_MESSAGE_SIZE",
    "ShellHandler",
    "websocket",
    "process",
    "_process",
    "_ws",
    "on",
    "err",
    "emit",
    "kill",
    "_exitSent",
    "_sendExit",
    "code",
    "_handleMessage",
    "m",
    "_stdoutOutstanding",
    "stdout",
    "_write",
    "STREAM_STDOUT",
    "data",
    "length",
    "pause",
    "resume",
    "_stderrOutstanding",
    "stderr",
    "STREAM_STDERR",
    "success",
    "send",
    "Buffer",
    "from",
    "MESSAGE_TYPE_EXIT",
    "close",
    "c",
    "slice",
    "MESSAGE_TYPE_DATA",
    "_handleData",
    "MESSAGE_TYPE_ACK",
    "_handleAck",
    "MESSAGE_TYPE_SIZE",
    "cols",
    "readUInt16BE",
    "rows",
    "resize",
    "Function",
    "MESSAGE_TYPE_ABORT",
    "streamId",
    "STREAM_STDIN",
    "stdin",
    "end",
    "_sendAck",
    "write",
    "count",
    "alloc",
    "writeUInt32BE",
    "readUInt32BE",
    "_writeChunk",
    "chunk",
    "header",
    "concat",
    "EventEmitter"
  ],
  "mappings": "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",
  "file": "server.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "let debug       = require('debug')('ws-shell');\nlet msgcodes    = require('./msgcodes');\nlet events      = require('events');\nlet _           = require('lodash');\nlet querystring = require('querystring');\nlet stream      = require('readable-stream');\nlet through2    = require('through2');\n\nconst MAX_OUTSTANDING = 64 * 1024;\nconst MAX_MESSAGE_SIZE = 16 * 1024;\n\n\nclass ShellHandler extends events.EventEmitter {\n  constructor(websocket, process) {\n    super();\n    this._process = process;\n    this._ws = websocket;\n    this._ws.on('error', err => {\n      debug('websocket error: %s', err);\n      this.emit('error', err);\n      this._process.kill();\n    });\n    this._exitSent = false;\n    this._process.on('error', err => {\n      debug('process error: %s', err);\n      this.emit('error', err);\n      this._sendExit(false);\n    });\n    this._process.on('exit', (code) => {\n      debug('process exited, code: %d', code);\n      this._sendExit(code === 0);\n    });\n    this._ws.on('message', m => this._handleMessage(m));\n\n    // Stream stdout\n    this._stdoutOutstanding = 0;\n    this._process.stdout.on('data', data => {\n      this._write(msgcodes.STREAM_STDOUT, data);\n      this._stdoutOutstanding += data.length;\n      if (this._stdoutOutstanding >= MAX_OUTSTANDING) {\n        this._process.stdout.pause();\n      }\n    });\n    this._process.stdout.on('end', () => {\n      this._write(msgcodes.STREAM_STDOUT, null);\n    });\n    this._process.stdout.resume();\n\n    // Stream stderr\n    this._stderrOutstanding = 0;\n    this._process.stderr.on('data', data => {\n      this._write(msgcodes.STREAM_STDERR, data);\n      this._stderrOutstanding += data.length;\n      if (this._stderrOutstanding >= MAX_OUTSTANDING) {\n        this._process.stderr.pause();\n      }\n    });\n    this._process.stderr.on('end', () => {\n      this._write(msgcodes.STREAM_STDERR, null);\n    });\n    this._process.stderr.resume();\n  }\n\n  _sendExit(success) {\n    if (this._exitSent) {\n      return;\n    }\n    this._exitSent = true;\n    this._ws.send(Buffer.from([\n      msgcodes.MESSAGE_TYPE_EXIT,\n      success ? 0 : 1,\n    ]));\n    this._ws.close();\n  }\n\n  _handleMessage(m) {\n    let c = m[0];\n    m = m.slice(1);\n    switch (c) {\n      case msgcodes.MESSAGE_TYPE_DATA:\n        return this._handleData(m[0], m.slice(1));\n      case msgcodes.MESSAGE_TYPE_ACK:\n        return this._handleAck(m[0], m.slice(1));\n      case msgcodes.MESSAGE_TYPE_SIZE:\n        if (m.length === 4) {\n          let cols = m.readUInt16BE(0);\n          let rows = m.readUInt16BE(2);\n          if (this._process.resize instanceof Function) {\n            this._process.resize(cols, rows);\n          } else {\n            debug('process.resize(cols, rows) not defined, resize message ignored');\n          }\n        }\n        return;\n      case msgcodes.MESSAGE_TYPE_ABORT:\n        return this._process.kill();\n      default:\n        debug('Unknown message code: %d', c);\n    }\n  }\n\n  _handleData(streamId, m) {\n    switch (streamId) {\n      case msgcodes.STREAM_STDIN:\n        if (m.length === 0) {\n          this._process.stdin.end(() => {\n            this._sendAck(0);\n          });\n          return;\n        }\n        this._process.stdin.write(m, () => {\n          this._sendAck(m.length);\n        });\n        return;\n      default:\n        debug('Data for unhandled streamId: %d', streamId);\n    }\n  }\n\n  _sendAck(count) {\n    let m = Buffer.alloc(6);\n    m[0] = msgcodes.MESSAGE_TYPE_ACK;\n    m[1] = msgcodes.STREAM_STDIN;\n    m.writeUInt32BE(count, 2);\n    this._ws.send(m);\n  }\n\n  _handleAck(streamId, m) {\n    if (m.length !== 4) {\n      debug('Acknowledgement for streamId: %d not 4 bytes long', streamId);\n      return;\n    }\n    let count = m.readUInt32BE(0);\n    switch (streamId) {\n      case msgcodes.STREAM_STDOUT:\n        this._stdoutOutstanding -= count;\n        if (this._stdoutOutstanding < MAX_OUTSTANDING) {\n          this._process.stdout.resume();\n        }\n        break;\n      case msgcodes.STREAM_STDERR:\n        this._stderrOutstanding -= count;\n        if (this._stderrOutstanding < MAX_OUTSTANDING) {\n          this._process.stderr.resume();\n        }\n        break;\n      default:\n        debug('Acknowledgement for unknown streamId: %d', streamId);\n    }\n  }\n\n  _write(streamId, data) {\n    if (data === null) {\n      // Empty payload signals end of stream\n      data = Buffer.from([]);\n    } else if (data.length === 0) {\n      // Don't allow empty buffers as it signals end of stream\n      return;\n    }\n    // Split into messages, if needed\n    while (data.length > MAX_MESSAGE_SIZE) {\n      this._writeChunk(streamId, data.slice(0, MAX_MESSAGE_SIZE));\n      data = data.slice(MAX_MESSAGE_SIZE);\n    }\n    this._writeChunk(streamId, data);\n  }\n\n  _writeChunk(streamId, chunk) {\n    let header = Buffer.from([\n      msgcodes.MESSAGE_TYPE_DATA,\n      streamId,\n    ]);\n    this._ws.send(Buffer.concat([header, chunk]));\n  }\n\n\n}\n"
  ]
}
