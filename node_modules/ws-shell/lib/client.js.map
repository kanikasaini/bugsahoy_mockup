{
  "version": 3,
  "sources": [
    "client.js"
  ],
  "names": [
    "debug",
    "require",
    "msgcodes",
    "events",
    "_",
    "querystring",
    "stream",
    "through2",
    "WebSocket",
    "global",
    "MAX_MESSAGE_SIZE",
    "ShellClient",
    "options",
    "defaults",
    "tty",
    "command",
    "url",
    "isTTY",
    "test",
    "Error",
    "Array",
    "every",
    "e",
    "stringify",
    "_ws",
    "binaryType",
    "addEventListener",
    "emit",
    "_handleMessage",
    "err",
    "_exitEmitted",
    "stdout",
    "objectMode",
    "allowHalfOpen",
    "_stdoutOutstanding",
    "on",
    "_sendAck",
    "STREAM_STDOUT",
    "stderr",
    "_stderrOutstanding",
    "STREAM_STDERR",
    "_pendingWrites",
    "stdin",
    "Writable",
    "highWaterMark",
    "decodeStrings",
    "write",
    "_write",
    "bind",
    "writev",
    "chunks",
    "callback",
    "data",
    "Buffer",
    "concat",
    "map",
    "c",
    "chunk",
    "header",
    "from",
    "MESSAGE_TYPE_DATA",
    "STREAM_STDIN",
    "send",
    "message",
    "push",
    "count",
    "m",
    "Uint8Array",
    "slice",
    "_handleData",
    "MESSAGE_TYPE_ACK",
    "_handleAck",
    "MESSAGE_TYPE_EXIT",
    "success",
    "streamId",
    "length",
    "end",
    "N",
    "readUInt32BE",
    "shift",
    "encoding",
    "_writeChunk",
    "alloc",
    "writeUInt32BE",
    "cols",
    "rows",
    "MESSAGE_TYPE_SIZE",
    "writeUInt16BE",
    "_abortSent",
    "MESSAGE_TYPE_ABORT",
    "kill",
    "close",
    "EventEmitter",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "client.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "let debug       = require('debug')('ws-shell');\nlet msgcodes    = require('./msgcodes');\nlet events      = require('events');\nlet _           = require('lodash');\nlet querystring = require('querystring');\nlet stream      = require('readable-stream');\nlet through2    = require('through2');\n\n// Load ws, if WebSocket isn't present on global/window\nlet WebSocket = global.WebSocket;\nif (!WebSocket) {\n  WebSocket = require('ws');\n}\n\nconst MAX_MESSAGE_SIZE = 16 * 1024;\n\n/** ShellClient */\nclass ShellClient extends events.EventEmitter {\n  constructor(options) {\n    super();\n    options = _.defaults({}, options, {\n      tty:      false,\n      command:  [],\n      url:      null,\n    });\n\n    // Remember, if this is a tty\n    this.isTTY = options.tty;\n\n    // Validate URL before we do anything\n    if (!/^wss?:\\/\\/.+/.test(options.url)) {\n      throw new Error(`url must be ws:// or wss://, got: ${options.url}`);\n    }\n\n    // Wrap commad in array, if it's a string\n    if (typeof options.command === 'string') {\n      options.command = [options.command];\n    }\n\n    // Validate command\n    if (!(options.command instanceof Array)) {\n      throw new Error('options.command must be an array');\n    }\n    if (!_.every(options.command, e => typeof e === 'string')) {\n      throw new Error('options.command must be an array of strings');\n    }\n\n    // Construct URL\n    let url = options.url + '?' + querystring.stringify({\n      tty:      options.tty ? 'true' : 'false',\n      command:  options.command,\n    });\n\n    // Construct websocket\n    this._ws = new WebSocket(url);\n    this._ws.binaryType = 'arraybuffer';\n\n    // Handle websocket events\n    this._ws.addEventListener('open', () => {\n      debug('websocket opened');\n      this.emit('open');\n    });\n    this._ws.addEventListener('message', (e) => this._handleMessage(e));\n    this._ws.addEventListener('error', (err) => {\n      debug('websocket error: %s', err);\n      this.emit('error', err);\n    });\n\n    // Ensure we only emit exit once\n    this._exitEmitted = false;\n    this._ws.addEventListener('close', () => {\n      debug('websocket closed');\n      if (!this._exitEmitted) {\n        this.emit('exit', false);\n        this._exitEmitted = true;\n      }\n    });\n\n    // Setup stdout stream\n    this.stdout = through2({objectMode: false, allowHalfOpen: false});\n    this._stdoutOutstanding = 0;\n    this.stdout.on('drain', () => {\n      if (this._stdoutOutstanding > 0) {\n        this._sendAck(msgcodes.STREAM_STDOUT, this._stdoutOutstanding);\n        this._stdoutOutstanding = 0;\n      }\n    });\n\n    // Setup stderr stream\n    this.stderr = through2({objectMode: false, allowHalfOpen: false});\n    this._stderrOutstanding = 0;\n    this.stderr.on('drain', () => {\n      if (this._stderrOutstanding > 0) {\n        this._sendAck(msgcodes.STREAM_STDERR, this._stderrOutstanding);\n        this._stderrOutstanding = 0;\n      }\n    });\n\n    // Setup stdin stream\n    this._pendingWrites = []; // {count, callback}\n    this.stdin = new stream.Writable({\n      highWaterMark:  MAX_MESSAGE_SIZE,\n      decodeStrings:  true, // docs are ambiguous here\n      objectMode:     false,\n      write:          this._write.bind(this),\n      writev: (chunks, callback) => {\n        let data = Buffer.concat(chunks.map(c => c.chunk));\n        this._write(data, null, callback);\n      },\n    });\n    this.stdin.on('finish', () => {\n      let header = Buffer.from([\n        msgcodes.MESSAGE_TYPE_DATA,\n        msgcodes.STREAM_STDIN,\n      ]);\n      this._ws.send(message);\n      this._pendingWrites.push({count: 0, callback() {\n        // TODO: Node streams doesn't support acknowleging that the stream was\n        // successfully closed.\n        debug('stream finished');\n      }});\n    });\n  }\n\n  _handleMessage(e) {\n    let m = Buffer.from(new Uint8Array(e.data));\n    let c = m[0];\n    m = m.slice(1);\n\n    switch (c) {\n      case msgcodes.MESSAGE_TYPE_DATA:\n        return this._handleData(m[0], m.slice(1));\n\n      case msgcodes.MESSAGE_TYPE_ACK:\n        return this._handleAck(m[0], m.slice(1));\n\n      case msgcodes.MESSAGE_TYPE_EXIT:\n        let success = m[0] === 0;\n        // Only emit exit once\n        if (!this._exitEmitted) {\n          this.emit('exit', success);\n          this._exitEmitted = true;\n        }\n        return;\n\n      default:\n        debug('Unknown message code: %d', c);\n    }\n  }\n\n  _handleData(streamId, m) {\n    switch (streamId) {\n      case msgcodes.STREAM_STDOUT:\n        // close stdout, if payload is empty\n        if (m.length === 0) {\n          this.stdout.end();\n          return;\n        }\n        // output m to stdout\n        if (this.stdout.write(m)) {\n          // If stream isn't blocked we send drain event immediately\n          this._sendAck(msgcodes.STREAM_STDOUT, m.length);\n          return;\n        }\n        // Wait for drain event before sending ack\n        this._stdoutOutstanding += m.length;\n        return;\n      case msgcodes.STREAM_STDERR:\n        // close stderr, if payload is empty\n        if (m.length === 0) {\n          this.stderr.end();\n          return;\n        }\n        // output m to stderr\n        if (this.stderr.write(m)) {\n          // If stream isn't blocked we send drain event immediately\n          this._sendAck(msgcodes.STREAM_STDERR, m.length);\n          return;\n        }\n        // Wait for drain event before sending ack\n        this._stderrOutstanding += m.length;\n        return;\n      default:\n        debug('Unknown stream identifier: %d', streamId);\n    }\n  }\n\n  _handleAck(streamId, m) {\n    if (streamId !== msgcodes.STREAM_STDIN) {\n      return debug('Ack for unknown stream identifier: %d', streamId);\n    }\n    if (m.length !== 4) {\n      return debug('Ack for stdin, but length was not 4');\n    }\n    let N = m.readUInt32BE(0);\n    if (N === 0) {\n      if (this._pendingWrites[0].count === 0) {\n        this._pendingWrites.shift().callback();\n      } else {\n        this.emit('error', new Error('stdin closed before all writes was acknowledged'));\n      }\n    }\n    // ack N from stdin\n    while (this._pendingWrites.length > 0 && N > 0) {\n      if (this._pendingWrites[0].count <= N) {\n        N -= this._pendingWrites[0].count;\n        this._pendingWrites.shift().callback();\n      } else {\n        this._pendingWrites[0].count -= N;\n        N = 0;\n      }\n    }\n    if (N > 0) {\n      this.emit('error', new Error('Received acknowledgement for data not sent'));\n    }\n  }\n\n  _write(data, encoding, callback) {\n    while (data.length > MAX_MESSAGE_SIZE) {\n      this._writeChunk(data.slice(0, MAX_MESSAGE_SIZE), null, () => {});\n      data = data.slice(MAX_MESSAGE_SIZE);\n    }\n    this._writeChunk(data, null, callback);\n  }\n\n  _writeChunk(chunk, encoding, callback) {\n    if (chunk.length === 0) {\n      return callback();\n    }\n    let header = Buffer.from([\n      msgcodes.MESSAGE_TYPE_DATA,\n      msgcodes.STREAM_STDIN,\n    ]);\n    let message = Buffer.concat([header, chunk]);\n    this._ws.send(message);\n    this._pendingWrites.push({count: chunk.length, callback});\n  }\n\n  _sendAck(streamId, N) {\n    let m = Buffer.alloc(6);\n    m[0] = msgcodes.MESSAGE_TYPE_ACK;\n    m[1] = streamId;\n    m.writeUInt32BE(N, 2);\n    this._ws.send(m);\n  }\n\n  resize(cols, rows) {\n    let m = Buffer.alloc(5);\n    m[0] = msgcodes.MESSAGE_TYPE_SIZE;\n    m.writeUInt16BE(cols, 1);\n    m.writeUInt16BE(rows, 3);\n    this._ws.send(m);\n  }\n\n  kill() {\n    if (this._abortSent) {\n      return;\n    }\n    this._abortSent = true;\n    let m = Buffer.alloc(1);\n    m[0] = msgcodes.MESSAGE_TYPE_ABORT;\n    this._ws.send(m);\n  }\n\n  close() {\n    try {\n      this.kill();\n    } catch (err) {\n      debug('close() failed to call kill(), error: %s', err);\n    }\n    this._ws.close();\n  }\n}\n\n// Export ShellClient\nmodule.exports = ShellClient;\n"
  ]
}
