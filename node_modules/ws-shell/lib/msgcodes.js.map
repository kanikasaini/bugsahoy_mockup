{
  "version": 3,
  "sources": [
    "msgcodes.js"
  ],
  "names": [
    "module",
    "exports",
    "MESSAGE_TYPE_DATA",
    "MESSAGE_TYPE_ACK",
    "MESSAGE_TYPE_SIZE",
    "MESSAGE_TYPE_ABORT",
    "MESSAGE_TYPE_EXIT",
    "STREAM_STDIN",
    "STREAM_STDOUT",
    "STREAM_STDERR"
  ],
  "mappings": ";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAOC,OAAP,GAAiB;AACfC,qBAAoB,CADL;AAEfC,oBAAoB,CAFL;AAGfC,qBAAoB,CAHL;AAIfC,sBAAoB,CAJL;AAKfC,qBAAoB,CALL;AAMfC,gBAAoB,CANL;AAOfC,iBAAoB,CAPL;AAQfC,iBAAoB;AARL,CAAjB",
  "file": "msgcodes.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "// Message type codes for websocket messages implementing interactive shell.\n//\n// We will send stdin, stdout, stderr, exit and abort messages over a\n// websocket. Messages will all have the form: [type] [data]\n//\n// Where [type] is a single byte with the value of MessageTypeData\n// MessageTypeAbort or MessageTypeExit.\n// The data property depends on the [type] of the message, as outlined below.\n//\n// If [type] is MessageTypeData then\n//   [data] = [stream] [payload]\n// , where  [stream] is a single byte: StreamStdin, StreamStdout, StreamStderr,\n// and [payload] is data from this stream. If [payload] is an empty byte\n// sequence this signals the end of the stream.\n//\n// If [type] is MessageTypeAck then\n//   [data] = [stream] [N]\n// , where [stream] is a single byte: StreamStdin, StreamStdout, StreamStderr,\n// and [N] is a big-endian 32 bit unsigned integer acknowleging the remote\n// stream to have processed N bytes.\n//\n// If [type] is MessageTypeAbort then [data] is empty, this message is used\n// to request that the executing be aborted.\n//\n// If [type] is MessageTypeExit then [data] = [exitCode], where exitCode is a\n// single byte 0 (success) or 1 (failed) indicating whether the command\n// terminated successfully.\n//\n// If [type] is MessageTypeSize then\n//   [data] = [columns] [rows]\n// , where [columns] and [rows] are big-endian 16 bit unsigned integers\n// specifying the width and height of the TTY. If not supported this message is\n// is ignored.\nmodule.exports = {\n  MESSAGE_TYPE_DATA:  0,\n  MESSAGE_TYPE_ACK:   1,\n  MESSAGE_TYPE_SIZE:  3,\n  MESSAGE_TYPE_ABORT: 4,\n  MESSAGE_TYPE_EXIT:  5,\n  STREAM_STDIN:       0,\n  STREAM_STDOUT:      1,\n  STREAM_STDERR:      2,\n};\n"
  ]
}
