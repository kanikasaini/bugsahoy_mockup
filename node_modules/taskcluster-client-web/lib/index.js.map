{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap b3c3c3ab8f03927b0f14","webpack:///./src/Client.js","webpack:///./src/fetch.js","webpack:///./src/utils.js","webpack:///external \"hawk\"","webpack:///./src/clients/Auth.js","webpack:///./src/index.js","webpack:///./src/WebListener.js","webpack:///./src/agents/OIDCCredentialAgent.js","webpack:///./src/clients/AuthEvents.js","webpack:///./src/clients/AwsProvisioner.js","webpack:///./src/clients/AwsProvisionerEvents.js","webpack:///./src/clients/Github.js","webpack:///./src/clients/GithubEvents.js","webpack:///./src/clients/Hooks.js","webpack:///./src/clients/Index.js","webpack:///./src/clients/Login.js","webpack:///./src/clients/Notify.js","webpack:///./src/clients/Pulse.js","webpack:///./src/clients/PurgeCache.js","webpack:///./src/clients/PurgeCacheEvents.js","webpack:///./src/clients/Queue.js","webpack:///./src/clients/QueueEvents.js","webpack:///./src/clients/Secrets.js","webpack:///./src/clients/TreeherderEvents.js","webpack:///./src/credentials.js","webpack:///./src/emitter.js","webpack:///external {\"commonjs\":\"query-string\",\"commonjs2\":\"query-string\",\"amd\":\"query-string\",\"root\":\"queryString\"}"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"hawk\"), require(\"query-string\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"taskcluster\", [\"hawk\", \"query-string\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"taskcluster\"] = factory(require(\"hawk\"), require(\"query-string\"));\n\telse\n\t\troot[\"taskcluster\"] = factory(root[\"hawk\"], root[\"queryString\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_26__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b3c3c3ab8f03927b0f14","import { stringify } from 'query-string';\nimport hawk from 'hawk';\nimport fetch from './fetch';\n\nconst REMOVE_TRAILING_SLASH = /\\/$/;\n\nexport default class Client {\n  static defaults = {\n    credentials: null,\n    authorizedScopes: null,\n    timeout: 30 * 1000,\n    retries: 5,\n    delayFactor: 100,\n    randomizationFactor: 0.25,\n    maxDelay: 30 * 1000,\n    exchangePrefix: '',\n    credentialAgent: null\n  };\n\n  static create(reference) {\n    return class extends Client {\n      constructor(options) {\n        super({ ...options, reference });\n      }\n    };\n  }\n\n  constructor(options = {}) {\n    this.options = {\n      ...Client.defaults,\n      ...options\n    };\n\n    if (this.options.baseUrl) {\n      this.options.baseUrl = this.options.baseUrl.replace(REMOVE_TRAILING_SLASH, '');\n    }\n\n    if (this.options.randomizationFactor < 0 || this.options.randomizationFactor >= 1) {\n      throw new Error('options.randomizationFactor must be between 0 and 1');\n    }\n\n    if (this.options.accessToken) {\n      throw new Error('options.accessToken is no longer supported; use OIDCCredentialAgent');\n    }\n\n    const { reference } = options;\n\n    if (reference) {\n      if (reference.baseUrl) {\n        this.options.baseUrl = reference.baseUrl.replace(REMOVE_TRAILING_SLASH, '');\n      }\n\n      if (reference.exchangePrefix) {\n        this.options.exchangePrefix = reference.exchangePrefix;\n      }\n\n      if (reference.entries) {\n        reference.entries.forEach((entry) => {\n          if (entry.type === 'function') {\n            // eslint-disable-next-line func-names\n            this[entry.name] = function (...args) {\n              this.validate(entry, args);\n              return this.request(entry, args);\n            };\n            this[entry.name].entry = entry;\n          }\n\n          if (entry.type === 'topic-exchange') {\n            // eslint-disable-next-line func-names\n            this[entry.name] = function (pattern) {\n              return this.normalizePattern(entry, pattern);\n            };\n          }\n        });\n      }\n    }\n  }\n\n  use(optionsUpdates) {\n    const options = { ...this.options, ...optionsUpdates };\n    return new this.constructor(options);\n  }\n\n  getMethodExpectedArity({ input, args }) {\n    return input ? args.length + 1 : args.length;\n  }\n\n  /* eslint-disable consistent-return */\n  buildExtraData(credentials) {\n    if (!credentials) {\n      return;\n    }\n\n    const { authorizedScopes } = this.options;\n    const { clientId, accessToken, certificate } = credentials;\n\n    if (!clientId || !accessToken) {\n      return;\n    }\n\n    const extra = {};\n\n    // If there is a certificate we have temporary credentials, and we\n    // must provide the certificate\n    if (certificate) {\n      extra.certificate = typeof certificate === 'string' ?\n        JSON.parse(certificate) :\n        certificate;\n    }\n\n    // If set of authorized scopes is provided, we'll restrict the request\n    // to only use these scopes\n    if (Array.isArray(authorizedScopes)) {\n      extra.authorizedScopes = authorizedScopes;\n    }\n\n    // If extra has any keys, base64 encode it\n    if (Object.keys(extra).length) {\n      return window.btoa(JSON.stringify(extra));\n    }\n  }\n  /* eslint-enable consistent-return */\n\n  buildEndpoint(entry, args) {\n    return entry.route.replace(/<([^<>]+)>/g, (text, arg) => {\n      const index = entry.args.indexOf(arg);\n\n      // Preserve original\n      if (index === -1) {\n        return text;\n      }\n\n      const param = args[index];\n      const type = typeof param;\n\n      if (type !== 'string' && type !== 'number') {\n        throw new Error(`URL parameter \\`${arg}\\` expected a string but was provided type \"${type}\"`);\n      }\n\n      return encodeURIComponent(param);\n    });\n  }\n\n  buildUrl(method, ...args) {\n    if (!method) {\n      throw new Error('buildUrl is missing required `method` argument');\n    }\n\n    // Find the method\n    const entry = method.entry;\n\n    if (!entry || entry.type !== 'function') {\n      throw new Error('Method in buildUrl must be an API method from the same object');\n    }\n\n    // Get the query string options taken\n    const optionKeys = entry.query || [];\n    const supportsOptions = optionKeys.length !== 0;\n    const arity = entry.args.length;\n\n    if (args.length !== arity && (!supportsOptions || args.length !== arity + 1)) {\n      throw new Error(\n        `Method \\`${entry.name}.buildUrl\\` expected ${arity + 1} argument(s) but received ${args.length + 1}`\n      );\n    }\n\n    const endpoint = this.buildEndpoint(entry, args);\n\n    if (args[arity]) {\n      Object\n        .keys(args[arity])\n        .forEach((key) => {\n          if (!optionKeys.includes(key)) {\n            throw new Error(`Method \\`${entry.name}\\` expected options ${optionKeys.join(', ')} but received ${key}`);\n          }\n        });\n    }\n\n    const queryArgs = args[arity] && stringify(args[arity]);\n    const query = queryArgs ? `?${queryArgs}` : '';\n\n    return `${this.options.baseUrl}${endpoint}${query}`;\n  }\n\n  async buildSignedUrl(method, ...args) {\n    if (!method) {\n      throw new Error('buildSignedUrl is missing required `method` argument');\n    }\n\n    // Find reference entry\n    const entry = method.entry;\n\n    if (entry.method.toLowerCase() !== 'get') {\n      throw new Error('buildSignedUrl only works for GET requests');\n    }\n\n    // Default to 15 minutes before expiration\n    let expiration = 15 * 60;\n    // Check if method supports query-string options\n    const supportsOptions = (entry.query || []).length !== 0;\n    // if longer than method + args, then we have options too\n    const arity = entry.args.length + (supportsOptions ? 1 : 0);\n\n    if (args.length > arity) {\n      // Get request options\n      const options = args.pop();\n\n      if (options.expiration) {\n        expiration = options.expiration;\n      }\n\n      if (typeof expiration !== 'number') {\n        throw new Error('options.expiration must be a number');\n      }\n    }\n\n    const url = this.buildUrl(method, ...args);\n    const credentials = this.options.credentialAgent ?\n      await this.options.credentialAgent.getCredentials() :\n      this.options.credentials;\n\n    if (!credentials) {\n      throw new Error('buildSignedUrl missing required credentials');\n    }\n\n    const { clientId, accessToken } = credentials;\n\n    if (!clientId) {\n      throw new Error('buildSignedUrl missing required credentials clientId');\n    }\n\n    if (!accessToken) {\n      throw new Error('buildSignedUrl missing required credentials accessToken');\n    }\n\n    const bewit = hawk.client.bewit(url, {\n      credentials: {\n        id: clientId,\n        key: accessToken,\n        algorithm: 'sha256'\n      },\n      ttlSec: expiration,\n      ext: this.buildExtraData(credentials)\n    });\n\n    return url.includes('?') ? `${url}&bewit=${bewit}` : `${url}?bewit=${bewit}`;\n  }\n\n  validate(entry, args = []) {\n    const expectedArity = this.getMethodExpectedArity(entry);\n    const queryOptions = entry.query || [];\n    const arity = args.length;\n\n    if (arity !== expectedArity && (queryOptions.length === 0 || arity !== expectedArity + 1)) {\n      throw new Error(`${entry.name} expected ${expectedArity} arguments but only received ${arity}`);\n    }\n\n    Object\n      .keys(args[expectedArity] || {})\n      .forEach((key) => {\n        if (!queryOptions.includes(key)) {\n          throw new Error(`${key} is not a valid option for ${entry.name}.\n            Valid options include: ${queryOptions.join(', ')}`);\n        }\n      });\n  }\n\n  normalizePattern(entry, pattern) {\n    const initialPattern = pattern || {};\n\n    if (!(initialPattern instanceof Object)) {\n      throw new Error('routingKeyPattern must be an object');\n    }\n\n    const routingKeyPattern = entry.routingKey\n      .map((key) => {\n        const value = key.constant || initialPattern[key.name];\n\n        if (typeof value === 'number') {\n          return `${value}`;\n        }\n\n        if (typeof value === 'string') {\n          if (value.includes('.') && !key.multipleWords) {\n            throw new Error(\n              `routingKeyPattern \"${value}\" for ${key.name} cannot contain dots since it does not hold multiple words`\n            );\n          }\n\n          return value;\n        }\n\n        if (value != null) {\n          throw new Error(`routingKey value \"${value}\" is not a valid pattern for ${key.name}`);\n        }\n\n        return key.multipleWords ? '#' : '*';\n      })\n      .join('.');\n\n    return {\n      routingKeyPattern,\n      routingKeyReference: entry.routingKey.map(item => ({ ...item })),\n      exchange: `${this.options.exchangePrefix}${entry.exchange}`\n    };\n  }\n\n  async request(entry, args) {\n    const expectedArity = this.getMethodExpectedArity(entry);\n    const endpoint = this.buildEndpoint(entry, args);\n    const query = args[expectedArity] ? `?${stringify(args[expectedArity])}` : '';\n    const url = `${this.options.baseUrl}${endpoint}${query}`;\n    const options = { method: entry.method };\n\n    const credentials = this.options.credentialAgent ?\n      await this.options.credentialAgent.getCredentials() :\n      this.options.credentials;\n\n    if (entry.input) {\n      options.body = JSON.stringify(args[expectedArity - 1]);\n    }\n    if (credentials) {\n      options.credentials = credentials;\n      options.extra = this.buildExtraData(credentials);\n    }\n\n    return fetch(url, options);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Client.js","import hawk from 'hawk';\n\nconst JSON_CONTENT = /^(application\\/(json|x-javascript)|text\\/(x-)?javascript|x-json)(;.*)?$/;\nconst defaults = {\n  credentials: 'omit',\n  retries: 5,\n  delayFactor: 100,\n  randomizationFactor: 0.25,\n  maxDelay: 30 * 1000,\n  timeout: 30 * 1000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst handleResponse = response => Promise\n  .resolve(response)\n  .then(() => (JSON_CONTENT.test(response.headers.get('Content-Type')) ? response.json() : null))\n  .then((json) => {\n    if (response.ok) {\n      return json;\n    }\n\n    const message = json.message ? json.message.split('---')[0] : response.statusText;\n\n    return Promise.reject(Object.assign(new Error(message), {\n      response,\n      body: json\n    }));\n  });\n\nexport default (url, opts = {}) => {\n  const options = { ...defaults, ...opts, headers: { ...(opts.body && defaults.headers), ...opts.headers } };\n  const { delayFactor, randomizationFactor, maxDelay, retries } = options;\n\n  if (typeof options.credentials !== 'string') {\n    const header = hawk.client.header(url, options.method.toUpperCase(), {\n      credentials: {\n        id: options.credentials.clientId,\n        key: options.credentials.accessToken,\n        algorithm: 'sha256'\n      },\n      ext: options.extra\n    });\n\n    options.credentials = 'omit';\n    options.headers.Authorization = header.field;\n  }\n\n  return new Promise((resolve, reject) => {\n    (function attempt(n) {\n      fetch(url, options)\n        .then(handleResponse)\n        .then(resolve)\n        .catch((err) => {\n          if (n > retries) {\n            reject(err);\n          } else {\n            const delay = Math.min(\n              ((n - 1) ** 2) * delayFactor * (((Math.random() * 2 * randomizationFactor) + 1) - randomizationFactor),\n              maxDelay\n            );\n\n            setTimeout(() => attempt(n + 1), delay);\n          }\n        });\n    }(options.retries));\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/fetch.js","// Regular expression matching:\n// A years B months C days D hours E minutes F seconds\nconst timeExpression = new RegExp([\n  '^(\\\\s*(-|\\\\+))?',\n  '(\\\\s*(\\\\d+)\\\\s*y((ears?)|r)?)?',\n  '(\\\\s*(\\\\d+)\\\\s*mo(nths?)?)?',\n  '(\\\\s*(\\\\d+)\\\\s*w((eeks?)|k)?)?',\n  '(\\\\s*(\\\\d+)\\\\s*d(ays?)?)?',\n  '(\\\\s*(\\\\d+)\\\\s*h((ours?)|r)?)?',\n  '(\\\\s*(\\\\d+)\\\\s*m(in(utes?)?)?)?',\n  '(\\\\s*(\\\\d+)\\\\s*s(ec(onds?)?)?)?',\n  '\\\\s*$'\n].join(''), 'i');\n\nexport const parseTime = (str = '') => {\n  // Parse the string\n  const match = timeExpression.exec(str);\n\n  if (!match) {\n    throw new Error(`\"${str}\" is not a valid time expression`);\n  }\n\n  // Negate if needed\n  const neg = (match[2] === '-' ? -1 : 1);\n\n  // Return parsed values\n  return {\n    years: parseInt(match[4] || 0, 10) * neg,\n    months: parseInt(match[8] || 0, 10) * neg,\n    weeks: parseInt(match[11] || 0, 10) * neg,\n    days: parseInt(match[15] || 0, 10) * neg,\n    hours: parseInt(match[18] || 0, 10) * neg,\n    minutes: parseInt(match[22] || 0, 10) * neg,\n    seconds: parseInt(match[25] || 0, 10) * neg\n  };\n};\n\n/**\n * Create a Date object offset = '1d 2h 3min' into the future\n *\n * Offset format: The argument `offset` (if given) is a string on the form\n *   `1 day 2 hours 3 minutes`\n * where specification of day, hours and minutes is optional. You can also the\n * short hand `1d2h3min`, it's fairly tolerant of different spelling forms and\n * whitespace. But only really meant to be used with constants.\n */\nexport const fromNow = (offset, reference = new Date()) => {\n  const parsedOffset = parseTime(offset || '');\n\n  parsedOffset.days += 30 * parsedOffset.months;\n  parsedOffset.days += 365 * parsedOffset.years;\n\n  return new Date(\n    reference.getTime() +\n    (parsedOffset.weeks * 7 * 24 * 60 * 60 * 1000) +\n    (parsedOffset.days * 24 * 60 * 60 * 1000) +\n    (parsedOffset.hours * 60 * 60 * 1000) +\n    (parsedOffset.minutes * 60 * 1000) +\n    (parsedOffset.seconds * 1000)\n  );\n};\n\n/**\n * Create an ISO 8601 time stamp offset = '1d 2h 3min' into the future\n *\n * This returns a time stamp in the format expected by taskcluster.\n * Compatible with Date.toJSON() from Javascript. These time stamps are string\n * that with UTC as timezone.\n *\n * Offset format: The argument `offset` (if given) is a string on the form\n *   `1 day 2 hours 3 minutes`\n * where specification of day, hours and minutes is optional. You can also the\n * short hand `1d2h3min`, it's fairly tolerant of different spelling forms and\n * whitespace. But only really meant to be used with constants.\n */\nexport const fromNowJSON = (offset, reference) => fromNow(offset, reference).toJSON();\n\n/* eslint-disable no-bitwise, no-mixed-operators */\nexport const uuid = () => {\n  const randoms = crypto.getRandomValues(new Uint8Array(16));\n\n  randoms[6] = (randoms[6] & 0x0f) | 0x40;\n  randoms[8] = (randoms[8] & 0x3f) | 0x80;\n\n  return randoms;\n};\n\nconst slug = (nice = false) => {\n  const bytes = uuid();\n\n  if (nice) {\n    bytes[0] &= 0x7f; // unset first bit to ensure [A-Za-f] first char\n  }\n\n  return btoa(String.fromCharCode.apply(null, bytes))\n    .replace(/\\+/g, '-') // Replace + with - (see RFC 4648, sec. 5)\n    .replace(/\\//g, '_') // Replace / with _ (see RFC 4648, sec. 5)\n    .substring(0, 22); // Drop '==' padding\n};\n/* eslint-enable no-bitwise, no-mixed-operators */\n\n/**\n * Returns a randomly generated uuid v4 compliant slug\n */\nexport const v4 = slug;\n\n/**\n * Returns a randomly generated uuid v4 compliant slug which conforms to a set\n * of \"nice\" properties, at the cost of some entropy. Currently this means one\n * extra fixed bit (the first bit of the uuid is set to 0) which guarantees the\n * slug will begin with [A-Za-f]. For example such slugs don't require special\n * handling when used as command line parameters (whereas non-nice slugs may\n * start with `-` which can confuse command line tools).\n *\n * Potentially other \"nice\" properties may be added in future to further\n * restrict the range of potential uuids that may be generated.\n */\nexport const nice = () => slug(true);\nexport const slugid = nice;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"hawk\"\n// module id = 3\n// module chunks = 0","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Auth extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://auth.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.listClients.entry = {type:'function',method:'get',route:'/clients/',query:['prefix'],args:[],name:'listClients',stability:'stable',output:true}; // eslint-disable-line\n    this.client.entry = {type:'function',method:'get',route:'/clients/<clientId>',query:[],args:['clientId'],name:'client',stability:'stable',output:true}; // eslint-disable-line\n    this.createClient.entry = {type:'function',method:'put',route:'/clients/<clientId>',query:[],args:['clientId'],name:'createClient',stability:'stable',scopes:[['auth:create-client:<clientId>']],input:true,output:true}; // eslint-disable-line\n    this.resetAccessToken.entry = {type:'function',method:'post',route:'/clients/<clientId>/reset',query:[],args:['clientId'],name:'resetAccessToken',stability:'stable',scopes:[['auth:reset-access-token:<clientId>']],output:true}; // eslint-disable-line\n    this.updateClient.entry = {type:'function',method:'post',route:'/clients/<clientId>',query:[],args:['clientId'],name:'updateClient',stability:'stable',scopes:[['auth:update-client:<clientId>']],input:true,output:true}; // eslint-disable-line\n    this.enableClient.entry = {type:'function',method:'post',route:'/clients/<clientId>/enable',query:[],args:['clientId'],name:'enableClient',stability:'stable',scopes:[['auth:enable-client:<clientId>']],output:true}; // eslint-disable-line\n    this.disableClient.entry = {type:'function',method:'post',route:'/clients/<clientId>/disable',query:[],args:['clientId'],name:'disableClient',stability:'stable',scopes:[['auth:disable-client:<clientId>']],output:true}; // eslint-disable-line\n    this.deleteClient.entry = {type:'function',method:'delete',route:'/clients/<clientId>',query:[],args:['clientId'],name:'deleteClient',stability:'stable',scopes:[['auth:delete-client:<clientId>']]}; // eslint-disable-line\n    this.listRoles.entry = {type:'function',method:'get',route:'/roles/',query:[],args:[],name:'listRoles',stability:'stable',output:true}; // eslint-disable-line\n    this.role.entry = {type:'function',method:'get',route:'/roles/<roleId>',query:[],args:['roleId'],name:'role',stability:'stable',output:true}; // eslint-disable-line\n    this.createRole.entry = {type:'function',method:'put',route:'/roles/<roleId>',query:[],args:['roleId'],name:'createRole',stability:'stable',scopes:[['auth:create-role:<roleId>']],input:true,output:true}; // eslint-disable-line\n    this.updateRole.entry = {type:'function',method:'post',route:'/roles/<roleId>',query:[],args:['roleId'],name:'updateRole',stability:'stable',scopes:[['auth:update-role:<roleId>']],input:true,output:true}; // eslint-disable-line\n    this.deleteRole.entry = {type:'function',method:'delete',route:'/roles/<roleId>',query:[],args:['roleId'],name:'deleteRole',stability:'stable',scopes:[['auth:delete-role:<roleId>']]}; // eslint-disable-line\n    this.expandScopesGet.entry = {type:'function',method:'get',route:'/scopes/expand',query:[],args:[],name:'expandScopesGet',stability:'deprecated',input:true,output:true}; // eslint-disable-line\n    this.expandScopes.entry = {type:'function',method:'post',route:'/scopes/expand',query:[],args:[],name:'expandScopes',stability:'stable',input:true,output:true}; // eslint-disable-line\n    this.currentScopes.entry = {type:'function',method:'get',route:'/scopes/current',query:[],args:[],name:'currentScopes',stability:'stable',output:true}; // eslint-disable-line\n    this.awsS3Credentials.entry = {type:'function',method:'get',route:'/aws/s3/<level>/<bucket>/<prefix>',query:['format'],args:['level','bucket','prefix'],name:'awsS3Credentials',stability:'stable',scopes:[['auth:aws-s3:<level>:<bucket>/<prefix>']],output:true}; // eslint-disable-line\n    this.azureAccounts.entry = {type:'function',method:'get',route:'/azure/accounts',query:[],args:[],name:'azureAccounts',stability:'stable',scopes:[['auth:azure-table:list-accounts']],output:true}; // eslint-disable-line\n    this.azureTables.entry = {type:'function',method:'get',route:'/azure/<account>/tables',query:['continuationToken'],args:['account'],name:'azureTables',stability:'stable',scopes:[['auth:azure-table:list-tables:<account>']],output:true}; // eslint-disable-line\n    this.azureTableSAS.entry = {type:'function',method:'get',route:'/azure/<account>/table/<table>/<level>',query:[],args:['account','table','level'],name:'azureTableSAS',stability:'stable',scopes:[['auth:azure-table:<level>:<account>/<table>']],output:true}; // eslint-disable-line\n    this.azureBlobSAS.entry = {type:'function',method:'get',route:'/azure/<account>/containers/<container>/<level>',query:[],args:['account','container','level'],name:'azureBlobSAS',stability:'stable',scopes:[['auth:azure-blob:<level>:<account>/<container>']],output:true}; // eslint-disable-line\n    this.sentryDSN.entry = {type:'function',method:'get',route:'/sentry/<project>/dsn',query:[],args:['project'],name:'sentryDSN',stability:'stable',scopes:[['auth:sentry:<project>']],output:true}; // eslint-disable-line\n    this.statsumToken.entry = {type:'function',method:'get',route:'/statsum/<project>/token',query:[],args:['project'],name:'statsumToken',stability:'stable',scopes:[['auth:statsum:<project>']],output:true}; // eslint-disable-line\n    this.webhooktunnelToken.entry = {type:'function',method:'get',route:'/webhooktunnel',query:[],args:[],name:'webhooktunnelToken',stability:'stable',scopes:[['auth:webhooktunnel']],output:true}; // eslint-disable-line\n    this.authenticateHawk.entry = {type:'function',method:'post',route:'/authenticate-hawk',query:[],args:[],name:'authenticateHawk',stability:'stable',input:true,output:true}; // eslint-disable-line\n    this.testAuthenticate.entry = {type:'function',method:'post',route:'/test-authenticate',query:[],args:[],name:'testAuthenticate',stability:'stable',input:true,output:true}; // eslint-disable-line\n    this.testAuthenticateGet.entry = {type:'function',method:'get',route:'/test-authenticate-get/',query:[],args:[],name:'testAuthenticateGet',stability:'stable',output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Get a list of all clients.  With `prefix`, only clients for which\n  // it is a prefix of the clientId are returned.\n  listClients(...args) {\n    this.validate(this.listClients.entry, args);\n    return this.request(this.listClients.entry, args);\n  }\n\n  // Get information about a single client.\n  client(...args) {\n    this.validate(this.client.entry, args);\n    return this.request(this.client.entry, args);\n  }\n\n  // Create a new client and get the `accessToken` for this client.\n  // You should store the `accessToken` from this API call as there is no\n  // other way to retrieve it.\n  // If you loose the `accessToken` you can call `resetAccessToken` to reset\n  // it, and a new `accessToken` will be returned, but you cannot retrieve the\n  // current `accessToken`.\n  // If a client with the same `clientId` already exists this operation will\n  // fail. Use `updateClient` if you wish to update an existing client.\n  // The caller's scopes must satisfy `scopes`.\n  createClient(...args) {\n    this.validate(this.createClient.entry, args);\n    return this.request(this.createClient.entry, args);\n  }\n\n  // Reset a clients `accessToken`, this will revoke the existing\n  // `accessToken`, generate a new `accessToken` and return it from this\n  // call.\n  // There is no way to retrieve an existing `accessToken`, so if you loose it\n  // you must reset the accessToken to acquire it again.\n  resetAccessToken(...args) {\n    this.validate(this.resetAccessToken.entry, args);\n    return this.request(this.resetAccessToken.entry, args);\n  }\n\n  // Update an exisiting client. The `clientId` and `accessToken` cannot be\n  // updated, but `scopes` can be modified.  The caller's scopes must\n  // satisfy all scopes being added to the client in the update operation.\n  // If no scopes are given in the request, the client's scopes remain\n  // unchanged\n  updateClient(...args) {\n    this.validate(this.updateClient.entry, args);\n    return this.request(this.updateClient.entry, args);\n  }\n\n  // Enable a client that was disabled with `disableClient`.  If the client\n  // is already enabled, this does nothing.\n  // This is typically used by identity providers to re-enable clients that\n  // had been disabled when the corresponding identity's scopes changed.\n  enableClient(...args) {\n    this.validate(this.enableClient.entry, args);\n    return this.request(this.enableClient.entry, args);\n  }\n\n  // Disable a client.  If the client is already disabled, this does nothing.\n  // This is typically used by identity providers to disable clients when the\n  // corresponding identity's scopes no longer satisfy the client's scopes.\n  disableClient(...args) {\n    this.validate(this.disableClient.entry, args);\n    return this.request(this.disableClient.entry, args);\n  }\n\n  // Delete a client, please note that any roles related to this client must\n  // be deleted independently.\n  deleteClient(...args) {\n    this.validate(this.deleteClient.entry, args);\n    return this.request(this.deleteClient.entry, args);\n  }\n\n  // Get a list of all roles, each role object also includes the list of\n  // scopes it expands to.\n  listRoles(...args) {\n    this.validate(this.listRoles.entry, args);\n    return this.request(this.listRoles.entry, args);\n  }\n\n  // Get information about a single role, including the set of scopes that the\n  // role expands to.\n  role(...args) {\n    this.validate(this.role.entry, args);\n    return this.request(this.role.entry, args);\n  }\n\n  // Create a new role.\n  // The caller's scopes must satisfy the new role's scopes.\n  // If there already exists a role with the same `roleId` this operation\n  // will fail. Use `updateRole` to modify an existing role.\n  // Creation of a role that will generate an infinite expansion will result\n  // in an error response.\n  createRole(...args) {\n    this.validate(this.createRole.entry, args);\n    return this.request(this.createRole.entry, args);\n  }\n\n  // Update an existing role.\n  // The caller's scopes must satisfy all of the new scopes being added, but\n  // need not satisfy all of the client's existing scopes.\n  // An update of a role that will generate an infinite expansion will result\n  // in an error response.\n  updateRole(...args) {\n    this.validate(this.updateRole.entry, args);\n    return this.request(this.updateRole.entry, args);\n  }\n\n  // Delete a role. This operation will succeed regardless of whether or not\n  // the role exists.\n  deleteRole(...args) {\n    this.validate(this.deleteRole.entry, args);\n    return this.request(this.deleteRole.entry, args);\n  }\n\n  // Return an expanded copy of the given scopeset, with scopes implied by any\n  // roles included.\n  // This call uses the GET method with an HTTP body.  It remains only for\n  // backward compatibility.\n  expandScopesGet(...args) {\n    this.validate(this.expandScopesGet.entry, args);\n    return this.request(this.expandScopesGet.entry, args);\n  }\n\n  // Return an expanded copy of the given scopeset, with scopes implied by any\n  // roles included.\n  expandScopes(...args) {\n    this.validate(this.expandScopes.entry, args);\n    return this.request(this.expandScopes.entry, args);\n  }\n\n  // Return the expanded scopes available in the request, taking into account all sources\n  // of scopes and scope restrictions (temporary credentials, assumeScopes, client scopes,\n  // and roles).\n  currentScopes(...args) {\n    this.validate(this.currentScopes.entry, args);\n    return this.request(this.currentScopes.entry, args);\n  }\n\n  // Get temporary AWS credentials for `read-write` or `read-only` access to\n  // a given `bucket` and `prefix` within that bucket.\n  // The `level` parameter can be `read-write` or `read-only` and determines\n  // which type of credentials are returned. Please note that the `level`\n  // parameter is required in the scope guarding access.  The bucket name must\n  // not contain `.`, as recommended by Amazon.\n  // This method can only allow access to a whitelisted set of buckets.  To add\n  // a bucket to that whitelist, contact the Taskcluster team, who will add it to\n  // the appropriate IAM policy.  If the bucket is in a different AWS account, you\n  // will also need to add a bucket policy allowing access from the Taskcluster\n  // account.  That policy should look like this:\n  // ```js\n  // {\n  //   \"Version\": \"2012-10-17\",\n  //   \"Statement\": [\n  //     {\n  //       \"Sid\": \"allow-taskcluster-auth-to-delegate-access\",\n  //       \"Effect\": \"Allow\",\n  //       \"Principal\": {\n  //         \"AWS\": \"arn:aws:iam::692406183521:root\"\n  //       },\n  //       \"Action\": [\n  //         \"s3:ListBucket\",\n  //         \"s3:GetObject\",\n  //         \"s3:PutObject\",\n  //         \"s3:DeleteObject\",\n  //         \"s3:GetBucketLocation\"\n  //       ],\n  //       \"Resource\": [\n  //         \"arn:aws:s3:::<bucket>\",\n  //         \"arn:aws:s3:::<bucket>/*\"\n  //       ]\n  //     }\n  //   ]\n  // }\n  // ```\n  // The credentials are set to expire after an hour, but this behavior is\n  // subject to change. Hence, you should always read the `expires` property\n  // from the response, if you intend to maintain active credentials in your\n  // application.\n  // Please note that your `prefix` may not start with slash `/`. Such a prefix\n  // is allowed on S3, but we forbid it here to discourage bad behavior.\n  // Also note that if your `prefix` doesn't end in a slash `/`, the STS\n  // credentials may allow access to unexpected keys, as S3 does not treat\n  // slashes specially.  For example, a prefix of `my-folder` will allow\n  // access to `my-folder/file.txt` as expected, but also to `my-folder.txt`,\n  // which may not be intended.\n  // Finally, note that the `PutObjectAcl` call is not allowed.  Passing a canned\n  // ACL other than `private` to `PutObject` is treated as a `PutObjectAcl` call, and\n  // will result in an access-denied error from AWS.  This limitation is due to a\n  // security flaw in Amazon S3 which might otherwise allow indefinite access to\n  // uploaded objects.\n  // **EC2 metadata compatibility**, if the querystring parameter\n  // `?format=iam-role-compat` is given, the response will be compatible\n  // with the JSON exposed by the EC2 metadata service. This aims to ease\n  // compatibility for libraries and tools built to auto-refresh credentials.\n  // For details on the format returned by EC2 metadata service see:\n  // [EC2 User Guide](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#instance-metadata-security-credentials).\n  awsS3Credentials(...args) {\n    this.validate(this.awsS3Credentials.entry, args);\n    return this.request(this.awsS3Credentials.entry, args);\n  }\n\n  // Retrieve a list of all Azure accounts managed by Taskcluster Auth.\n  azureAccounts(...args) {\n    this.validate(this.azureAccounts.entry, args);\n    return this.request(this.azureAccounts.entry, args);\n  }\n\n  // Retrieve a list of all tables in an account.\n  azureTables(...args) {\n    this.validate(this.azureTables.entry, args);\n    return this.request(this.azureTables.entry, args);\n  }\n\n  // Get a shared access signature (SAS) string for use with a specific Azure\n  // Table Storage table.\n  // The `level` parameter can be `read-write` or `read-only` and determines\n  // which type of credentials are returned.  If level is read-write, it will create the\n  // table if it doesn't already exist.\n  azureTableSAS(...args) {\n    this.validate(this.azureTableSAS.entry, args);\n    return this.request(this.azureTableSAS.entry, args);\n  }\n\n  // Get a shared access signature (SAS) string for use with a specific Azure\n  // Blob Storage container.\n  // The `level` parameter can be `read-write` or `read-only` and determines\n  // which type of credentials are returned.  If level is read-write, it will create the\n  // container if it doesn't already exist.\n  azureBlobSAS(...args) {\n    this.validate(this.azureBlobSAS.entry, args);\n    return this.request(this.azureBlobSAS.entry, args);\n  }\n\n  // Get temporary DSN (access credentials) for a sentry project.\n  // The credentials returned can be used with any Sentry client for up to\n  // 24 hours, after which the credentials will be automatically disabled.\n  // If the project doesn't exist it will be created, and assigned to the\n  // initial team configured for this component. Contact a Sentry admin\n  // to have the project transferred to a team you have access to if needed\n  sentryDSN(...args) {\n    this.validate(this.sentryDSN.entry, args);\n    return this.request(this.sentryDSN.entry, args);\n  }\n\n  // Get temporary `token` and `baseUrl` for sending metrics to statsum.\n  // The token is valid for 24 hours, clients should refresh after expiration.\n  statsumToken(...args) {\n    this.validate(this.statsumToken.entry, args);\n    return this.request(this.statsumToken.entry, args);\n  }\n\n  // Get temporary `token` and `id` for connecting to webhooktunnel\n  // The token is valid for 96 hours, clients should refresh after expiration.\n  webhooktunnelToken(...args) {\n    this.validate(this.webhooktunnelToken.entry, args);\n    return this.request(this.webhooktunnelToken.entry, args);\n  }\n\n  // Validate the request signature given on input and return list of scopes\n  // that the authenticating client has.\n  // This method is used by other services that wish rely on Taskcluster\n  // credentials for authentication. This way we can use Hawk without having\n  // the secret credentials leave this service.\n  authenticateHawk(...args) {\n    this.validate(this.authenticateHawk.entry, args);\n    return this.request(this.authenticateHawk.entry, args);\n  }\n\n  // Utility method to test client implementations of Taskcluster\n  // authentication.\n  // Rather than using real credentials, this endpoint accepts requests with\n  // clientId `tester` and accessToken `no-secret`. That client's scopes are\n  // based on `clientScopes` in the request body.\n  // The request is validated, with any certificate, authorizedScopes, etc.\n  // applied, and the resulting scopes are checked against `requiredScopes`\n  // from the request body. On success, the response contains the clientId\n  // and scopes as seen by the API method.\n  testAuthenticate(...args) {\n    this.validate(this.testAuthenticate.entry, args);\n    return this.request(this.testAuthenticate.entry, args);\n  }\n\n  // Utility method similar to `testAuthenticate`, but with the GET method,\n  // so it can be used with signed URLs (bewits).\n  // Rather than using real credentials, this endpoint accepts requests with\n  // clientId `tester` and accessToken `no-secret`. That client's scopes are\n  // `['test:*', 'auth:create-client:test:*']`.  The call fails if the\n  // `test:authenticate-get` scope is not available.\n  // The request is validated, with any certificate, authorizedScopes, etc.\n  // applied, and the resulting scopes are checked, just like any API call.\n  // On success, the response contains the clientId and scopes as seen by\n  // the API method.\n  // This method may later be extended to allow specification of client and\n  // required scopes via query arguments.\n  testAuthenticateGet(...args) {\n    this.validate(this.testAuthenticateGet.entry, args);\n    return this.request(this.testAuthenticateGet.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Auth.js","export { default as Client } from './Client';\nexport { default as OIDCCredentialAgent } from './agents/OIDCCredentialAgent';\nexport { createTemporaryCredentials, credentialInformation } from './credentials';\nexport { fromNow, fromNowJSON, slugid, nice, v4, parseTime } from './utils';\nexport { default as WebListener } from './WebListener';\nexport { default as request } from './fetch';\n\n// AUTOGENERATED-START\nexport { default as Auth } from './clients/Auth';\nexport { default as AuthEvents } from './clients/AuthEvents';\nexport { default as AwsProvisioner } from './clients/AwsProvisioner';\nexport { default as AwsProvisionerEvents } from './clients/AwsProvisionerEvents';\nexport { default as Github } from './clients/Github';\nexport { default as GithubEvents } from './clients/GithubEvents';\nexport { default as Hooks } from './clients/Hooks';\nexport { default as Index } from './clients/Index';\nexport { default as Login } from './clients/Login';\nexport { default as Notify } from './clients/Notify';\nexport { default as Pulse } from './clients/Pulse';\nexport { default as PurgeCache } from './clients/PurgeCache';\nexport { default as PurgeCacheEvents } from './clients/PurgeCacheEvents';\nexport { default as Queue } from './clients/Queue';\nexport { default as QueueEvents } from './clients/QueueEvents';\nexport { default as Secrets } from './clients/Secrets';\nexport { default as TreeherderEvents } from './clients/TreeherderEvents';\n// AUTOGENERATED-END\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import Emitter from './emitter';\nimport { v4 } from './utils';\n\nexport default class WebListener {\n  constructor(options) {\n    this.emitter = new Emitter();\n    this.options = {\n      baseUrl: 'wss://events.taskcluster.net/v1',\n      reconnectInterval: 5000,\n      ...options\n    };\n\n    this._bindings = [];\n    this._pendingPromises = [];\n  }\n\n  on(eventName, handler) {\n    return this.emitter.on(eventName, handler);\n  }\n\n  off(eventName, handler) {\n    return this.emitter.off(eventName, handler);\n  }\n\n  isOpen() {\n    return this.socket && this.socket.readyState === WebSocket.OPEN;\n  }\n\n  isConnected() {\n    return this.socket && this.socket.readyState !== WebSocket.CLOSED;\n  }\n\n  async connect() {\n    if (this.isConnected()) {\n      return Promise.resolve();\n    }\n\n    const { baseUrl } = this.options;\n    const socketUrl = baseUrl.endsWith('/') ? `${baseUrl}listen/websocket` : `${baseUrl}/listen/websocket`;\n\n    this.socket = new WebSocket(socketUrl);\n    this.socket.addEventListener('message', this.handleMessage);\n    this.socket.addEventListener('error', this.handleError);\n    this.socket.addEventListener('close', this.handleClose);\n\n    await new Promise((resolve, reject) => {\n      this.socket.addEventListener('error', reject);\n      this.socket.addEventListener('close', reject);\n      this.socket.addEventListener('open', () => {\n        // Remove event handler for error and close\n        this.socket.removeEventListener('error', reject);\n        this.socket.removeEventListener('close', reject);\n        resolve();\n      });\n    });\n\n    const awaitingBindings = Promise.all(this._bindings.map(binding => this._send('bind', binding)));\n\n    const isReady = new Promise((resolve, reject) => {\n      const offReady = this.on('ready', resolve);\n      const offError = this.on('error', reject);\n      const offClose = this.on('close', reject);\n      const unbindAll = () => {\n        offReady();\n        offError();\n        offClose();\n      };\n\n      this.on('ready', unbindAll);\n      this.on('error', unbindAll);\n      this.on('close', unbindAll);\n    });\n\n    // When all bindings have been bound, we're just waiting for 'ready'\n    return awaitingBindings\n      .then(() => {\n        clearInterval(this.connectInterval);\n        this.connectInterval = setInterval(() => {\n          if (!this.isConnected()) {\n            this\n              .connect()\n              .then(() => this.emitter.emit('reconnect'));\n          }\n        }, this.options.reconnectInterval);\n\n        return isReady;\n      });\n  }\n\n  _send(method, options) {\n    if (!this.isOpen()) {\n      throw new Error('Cannot send message if socket is not OPEN');\n    }\n\n    // Create request id\n    const id = v4();\n\n    // Send message, if socket is open\n    return new Promise((resolve, reject) => {\n      this._pendingPromises.push({ id, resolve, reject });\n      this.socket.send(JSON.stringify({ method, id, options }));\n    });\n  }\n\n  // eslint-disable-next-line consistent-return\n  handleMessage = (e) => {\n    let message;\n\n    try {\n      // Attempt to parse the message\n      message = JSON.parse(e.data);\n    } catch (err) {\n      return this.emitter.emit('error', err);\n    }\n\n    // Check that id is a string\n    if (typeof message.id !== 'string') {\n      return this.emitter.emit('error', new Error('Message has no id'));\n    }\n\n    this._pendingPromises = this._pendingPromises\n      .filter((promise) => {\n        // Only keep promises that are still pending,\n        // filter out the ones we are handling right now\n        if (promise.id !== message.id) {\n          return promise;\n        }\n\n        if (message.event === 'error') {\n          promise.reject(message.payload);\n        } else {\n          promise.resolve(message.payload);\n        }\n\n        // These promises are no longer pending, they are handled.\n        // Filter them out.\n        return false;\n      });\n\n    switch (message.event) {\n      case 'ready':\n      case 'bound':\n      case 'message':\n      case 'error':\n        return this.emitter.emit(message.event, message.payload || null);\n      default:\n        this.emit('error', new Error('Unknown event type from server'));\n    }\n  };\n\n  handleError = () => this.emitter.emit('error', new Error('WebSocket error'));\n\n  handleClose = () => {\n    this.emitter.emit('close');\n  };\n\n  bind(binding) {\n    // Store the binding so we can connect, if not already there\n    this._bindings.push(binding);\n\n    // If already open send the bind request\n    return this.isOpen() ?\n      this._send('bind', binding) :\n      Promise.resolve();\n  }\n\n  close() {\n    if (!this.isConnected()) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve) => {\n      clearInterval(this.connectInterval);\n      this.emitter.on('close', resolve);\n      this.socket.close();\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/WebListener.js","import fetch from '../fetch';\n\n/**\n * A credential agent that fetches the credentials from the taskcluster\n * login service, given an access_token.\n *\n * Users can keep a single such credential agent and use it simultaneously\n * with many Client instances.\n */\nexport default class OIDCCredentialAgent {\n  constructor({ accessToken, oidcProvider }) {\n    this._accessToken = accessToken;\n    this.oidcProvider = oidcProvider;\n  }\n\n  // Update the access token, invalidating any cached credentials\n  set accessToken(accessToken) {\n    this._accessToken = accessToken;\n    this.credentialsPromise = null;\n  }\n\n  get accessToken() {\n    return this._accessToken;\n  }\n\n  getCredentials() {\n    if (this.credentialsPromise && this.credentialsExpire > new Date()) {\n      return this.credentialsPromise;\n    }\n\n    // Call the oidcCredentials endpoint with the access token.\n    const loginBaseUrl = 'https://login.taskcluster.net';\n    const url = `${loginBaseUrl}/v1/oidc-credentials/${this.oidcProvider}`;\n\n    this.credentialsPromise = fetch(url, {\n      headers: {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    })\n    .then((response) => {\n      this.credentialsExpire = new Date(response.expires);\n\n      return response.credentials;\n    })\n    .catch((err) => {\n      this.credentialsPromise = null;\n      throw err;\n    });\n\n    return this.credentialsPromise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/agents/OIDCCredentialAgent.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class AuthEvents extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: '',\n      exchangePrefix: 'exchange/taskcluster-auth/v1/',\n      ...options\n    });\n  }\n\n  // Message that a new client has been created.\n  clientCreated(pattern) {\n    const entry = {type:'topic-exchange',exchange:'client-created',name:'clientCreated',routingKey:[{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/auth/v1/client-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Message that a new client has been updated.\n  clientUpdated(pattern) {\n    const entry = {type:'topic-exchange',exchange:'client-updated',name:'clientUpdated',routingKey:[{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/auth/v1/client-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Message that a new client has been deleted.\n  clientDeleted(pattern) {\n    const entry = {type:'topic-exchange',exchange:'client-deleted',name:'clientDeleted',routingKey:[{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/auth/v1/client-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Message that a new role has been created.\n  roleCreated(pattern) {\n    const entry = {type:'topic-exchange',exchange:'role-created',name:'roleCreated',routingKey:[{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/auth/v1/role-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Message that a new role has been updated.\n  roleUpdated(pattern) {\n    const entry = {type:'topic-exchange',exchange:'role-updated',name:'roleUpdated',routingKey:[{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/auth/v1/role-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Message that a new role has been deleted.\n  roleDeleted(pattern) {\n    const entry = {type:'topic-exchange',exchange:'role-deleted',name:'roleDeleted',routingKey:[{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/auth/v1/role-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/AuthEvents.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class AwsProvisioner extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://aws-provisioner.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.listWorkerTypeSummaries.entry = {type:'function',method:'get',route:'/list-worker-type-summaries',query:[],args:[],name:'listWorkerTypeSummaries',stability:'stable',output:true}; // eslint-disable-line\n    this.createWorkerType.entry = {type:'function',method:'put',route:'/worker-type/<workerType>',query:[],args:['workerType'],name:'createWorkerType',stability:'stable',scopes:[['aws-provisioner:manage-worker-type:<workerType>']],input:true,output:true}; // eslint-disable-line\n    this.updateWorkerType.entry = {type:'function',method:'post',route:'/worker-type/<workerType>/update',query:[],args:['workerType'],name:'updateWorkerType',stability:'stable',scopes:[['aws-provisioner:manage-worker-type:<workerType>']],input:true,output:true}; // eslint-disable-line\n    this.workerTypeLastModified.entry = {type:'function',method:'get',route:'/worker-type-last-modified/<workerType>',query:[],args:['workerType'],name:'workerTypeLastModified',stability:'stable',output:true}; // eslint-disable-line\n    this.workerType.entry = {type:'function',method:'get',route:'/worker-type/<workerType>',query:[],args:['workerType'],name:'workerType',stability:'stable',scopes:[['aws-provisioner:view-worker-type:<workerType>'],['aws-provisioner:manage-worker-type:<workerType>']],output:true}; // eslint-disable-line\n    this.removeWorkerType.entry = {type:'function',method:'delete',route:'/worker-type/<workerType>',query:[],args:['workerType'],name:'removeWorkerType',stability:'stable',scopes:[['aws-provisioner:manage-worker-type:<workerType>']]}; // eslint-disable-line\n    this.listWorkerTypes.entry = {type:'function',method:'get',route:'/list-worker-types',query:[],args:[],name:'listWorkerTypes',stability:'stable',output:true}; // eslint-disable-line\n    this.createSecret.entry = {type:'function',method:'put',route:'/secret/<token>',query:[],args:['token'],name:'createSecret',stability:'stable',scopes:[['aws-provisioner:create-secret:<workerType>']],input:true}; // eslint-disable-line\n    this.getSecret.entry = {type:'function',method:'get',route:'/secret/<token>',query:[],args:['token'],name:'getSecret',stability:'stable',output:true}; // eslint-disable-line\n    this.instanceStarted.entry = {type:'function',method:'get',route:'/instance-started/<instanceId>/<token>',query:[],args:['instanceId','token'],name:'instanceStarted',stability:'stable'}; // eslint-disable-line\n    this.removeSecret.entry = {type:'function',method:'delete',route:'/secret/<token>',query:[],args:['token'],name:'removeSecret',stability:'stable'}; // eslint-disable-line\n    this.getLaunchSpecs.entry = {type:'function',method:'get',route:'/worker-type/<workerType>/launch-specifications',query:[],args:['workerType'],name:'getLaunchSpecs',stability:'experimental',scopes:[['aws-provisioner:view-worker-type:<workerType>'],['aws-provisioner:manage-worker-type:<workerType>']],output:true}; // eslint-disable-line\n    this.state.entry = {type:'function',method:'get',route:'/state/<workerType>',query:[],args:['workerType'],name:'state',stability:'stable'}; // eslint-disable-line\n    this.backendStatus.entry = {type:'function',method:'get',route:'/backend-status',query:[],args:[],name:'backendStatus',stability:'experimental',output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Return a list of worker types, including some summary information about\n  // current capacity for each.  While this list includes all defined worker types,\n  // there may be running EC2 instances for deleted worker types that are not\n  // included here.  The list is unordered.\n  listWorkerTypeSummaries(...args) {\n    this.validate(this.listWorkerTypeSummaries.entry, args);\n    return this.request(this.listWorkerTypeSummaries.entry, args);\n  }\n\n  // Create a worker type.  A worker type contains all the configuration\n  // needed for the provisioner to manage the instances.  Each worker type\n  // knows which regions and which instance types are allowed for that\n  // worker type.  Remember that Capacity is the number of concurrent tasks\n  // that can be run on a given EC2 resource and that Utility is the relative\n  // performance rate between different instance types.  There is no way to\n  // configure different regions to have different sets of instance types\n  // so ensure that all instance types are available in all regions.\n  // This function is idempotent.\n  // Once a worker type is in the provisioner, a back ground process will\n  // begin creating instances for it based on its capacity bounds and its\n  // pending task count from the Queue.  It is the worker's responsibility\n  // to shut itself down.  The provisioner has a limit (currently 96hours)\n  // for all instances to prevent zombie instances from running indefinitely.\n  // The provisioner will ensure that all instances created are tagged with\n  // aws resource tags containing the provisioner id and the worker type.\n  // If provided, the secrets in the global, region and instance type sections\n  // are available using the secrets api.  If specified, the scopes provided\n  // will be used to generate a set of temporary credentials available with\n  // the other secrets.\n  createWorkerType(...args) {\n    this.validate(this.createWorkerType.entry, args);\n    return this.request(this.createWorkerType.entry, args);\n  }\n\n  // Provide a new copy of a worker type to replace the existing one.\n  // This will overwrite the existing worker type definition if there\n  // is already a worker type of that name.  This method will return a\n  // 200 response along with a copy of the worker type definition created\n  // Note that if you are using the result of a GET on the worker-type\n  // end point that you will need to delete the lastModified and workerType\n  // keys from the object returned, since those fields are not allowed\n  // the request body for this method\n  // Otherwise, all input requirements and actions are the same as the\n  // create method.\n  updateWorkerType(...args) {\n    this.validate(this.updateWorkerType.entry, args);\n    return this.request(this.updateWorkerType.entry, args);\n  }\n\n  // This method is provided to allow workers to see when they were\n  // last modified.  The value provided through UserData can be\n  // compared against this value to see if changes have been made\n  // If the worker type definition has not been changed, the date\n  // should be identical as it is the same stored value.\n  workerTypeLastModified(...args) {\n    this.validate(this.workerTypeLastModified.entry, args);\n    return this.request(this.workerTypeLastModified.entry, args);\n  }\n\n  // Retrieve a copy of the requested worker type definition.\n  // This copy contains a lastModified field as well as the worker\n  // type name.  As such, it will require manipulation to be able to\n  // use the results of this method to submit date to the update\n  // method.\n  workerType(...args) {\n    this.validate(this.workerType.entry, args);\n    return this.request(this.workerType.entry, args);\n  }\n\n  // Delete a worker type definition.  This method will only delete\n  // the worker type definition from the storage table.  The actual\n  // deletion will be handled by a background worker.  As soon as this\n  // method is called for a worker type, the background worker will\n  // immediately submit requests to cancel all spot requests for this\n  // worker type as well as killing all instances regardless of their\n  // state.  If you want to gracefully remove a worker type, you must\n  // either ensure that no tasks are created with that worker type name\n  // or you could theoretically set maxCapacity to 0, though, this is\n  // not a supported or tested action\n  removeWorkerType(...args) {\n    this.validate(this.removeWorkerType.entry, args);\n    return this.request(this.removeWorkerType.entry, args);\n  }\n\n  // Return a list of string worker type names.  These are the names\n  // of all managed worker types known to the provisioner.  This does\n  // not include worker types which are left overs from a deleted worker\n  // type definition but are still running in AWS.\n  listWorkerTypes(...args) {\n    this.validate(this.listWorkerTypes.entry, args);\n    return this.request(this.listWorkerTypes.entry, args);\n  }\n\n  // Insert a secret into the secret storage.  The supplied secrets will\n  // be provided verbatime via `getSecret`, while the supplied scopes will\n  // be converted into credentials by `getSecret`.\n  // This method is not ordinarily used in production; instead, the provisioner\n  // creates a new secret directly for each spot bid.\n  createSecret(...args) {\n    this.validate(this.createSecret.entry, args);\n    return this.request(this.createSecret.entry, args);\n  }\n\n  // Retrieve a secret from storage.  The result contains any passwords or\n  // other restricted information verbatim as well as a temporary credential\n  // based on the scopes specified when the secret was created.\n  // It is important that this secret is deleted by the consumer (`removeSecret`),\n  // or else the secrets will be visible to any process which can access the\n  // user data associated with the instance.\n  getSecret(...args) {\n    this.validate(this.getSecret.entry, args);\n    return this.request(this.getSecret.entry, args);\n  }\n\n  // An instance will report in by giving its instance id as well\n  // as its security token.  The token is given and checked to ensure\n  // that it matches a real token that exists to ensure that random\n  // machines do not check in.  We could generate a different token\n  // but that seems like overkill\n  instanceStarted(...args) {\n    this.validate(this.instanceStarted.entry, args);\n    return this.request(this.instanceStarted.entry, args);\n  }\n\n  // Remove a secret.  After this call, a call to `getSecret` with the given\n  // token will return no information.\n  // It is very important that the consumer of a\n  // secret delete the secret from storage before handing over control\n  // to untrusted processes to prevent credential and/or secret leakage.\n  removeSecret(...args) {\n    this.validate(this.removeSecret.entry, args);\n    return this.request(this.removeSecret.entry, args);\n  }\n\n  // This method returns a preview of all possible launch specifications\n  // that this worker type definition could submit to EC2.  It is used to\n  // test worker types, nothing more\n  // **This API end-point is experimental and may be subject to change without warning.**\n  getLaunchSpecs(...args) {\n    this.validate(this.getLaunchSpecs.entry, args);\n    return this.request(this.getLaunchSpecs.entry, args);\n  }\n\n  // Return the state of a given workertype as stored by the provisioner.\n  // This state is stored as three lists: 1 for running instances, 1 for\n  // pending requests.  The `summary` property contains an updated summary\n  // similar to that returned from `listWorkerTypeSummaries`.\n  state(...args) {\n    this.validate(this.state.entry, args);\n    return this.request(this.state.entry, args);\n  }\n\n  // This endpoint is used to show when the last time the provisioner\n  // has checked in.  A check in is done through the deadman's snitch\n  // api.  It is done at the conclusion of a provisioning iteration\n  // and used to tell if the background provisioning process is still\n  // running.\n  // **Warning** this api end-point is **not stable**.\n  backendStatus(...args) {\n    this.validate(this.backendStatus.entry, args);\n    return this.request(this.backendStatus.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/AwsProvisioner.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class AwsProvisionerEvents extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: '',\n      exchangePrefix: 'exchange/taskcluster-aws-provisioner/v1/',\n      ...options\n    });\n  }\n\n  // When a new `workerType` is created a message will be published to this\n  // exchange.\n  workerTypeCreated(pattern) {\n    const entry = {type:'topic-exchange',exchange:'worker-type-created',name:'workerTypeCreated',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // When a `workerType` is updated a message will be published to this\n  // exchange.\n  workerTypeUpdated(pattern) {\n    const entry = {type:'topic-exchange',exchange:'worker-type-updated',name:'workerTypeUpdated',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // When a `workerType` is removed a message will be published to this\n  // exchange.\n  workerTypeRemoved(pattern) {\n    const entry = {type:'topic-exchange',exchange:'worker-type-removed',name:'workerTypeRemoved',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/AwsProvisionerEvents.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Github extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://github.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.githubWebHookConsumer.entry = {type:'function',method:'post',route:'/github',query:[],args:[],name:'githubWebHookConsumer',stability:'experimental'}; // eslint-disable-line\n    this.builds.entry = {type:'function',method:'get',route:'/builds',query:['continuationToken','limit','organization','repository','sha'],args:[],name:'builds',stability:'experimental',output:true}; // eslint-disable-line\n    this.badge.entry = {type:'function',method:'get',route:'/repository/<owner>/<repo>/<branch>/badge.svg',query:[],args:['owner','repo','branch'],name:'badge',stability:'experimental'}; // eslint-disable-line\n    this.repository.entry = {type:'function',method:'get',route:'/repository/<owner>/<repo>',query:[],args:['owner','repo'],name:'repository',stability:'experimental',output:true}; // eslint-disable-line\n    this.latest.entry = {type:'function',method:'get',route:'/repository/<owner>/<repo>/<branch>/latest',query:[],args:['owner','repo','branch'],name:'latest',stability:'experimental'}; // eslint-disable-line\n    this.createStatus.entry = {type:'function',method:'post',route:'/repository/<owner>/<repo>/statuses/<sha>',query:[],args:['owner','repo','sha'],name:'createStatus',stability:'experimental',scopes:{AllOf:['github:create-status:<owner>/<repo>']},input:true}; // eslint-disable-line\n    this.createComment.entry = {type:'function',method:'post',route:'/repository/<owner>/<repo>/issues/<number>/comments',query:[],args:['owner','repo','number'],name:'createComment',stability:'experimental',scopes:{AllOf:['github:create-comment:<owner>/<repo>']},input:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Capture a GitHub event and publish it via pulse, if it's a push,\n  // release or pull request.\n  githubWebHookConsumer(...args) {\n    this.validate(this.githubWebHookConsumer.entry, args);\n    return this.request(this.githubWebHookConsumer.entry, args);\n  }\n\n  // A paginated list of builds that have been run in\n  // Taskcluster. Can be filtered on various git-specific\n  // fields.\n  builds(...args) {\n    this.validate(this.builds.entry, args);\n    return this.request(this.builds.entry, args);\n  }\n\n  // Checks the status of the latest build of a given branch\n  // and returns corresponding badge svg.\n  badge(...args) {\n    this.validate(this.badge.entry, args);\n    return this.request(this.badge.entry, args);\n  }\n\n  // Returns any repository metadata that is\n  // useful within Taskcluster related services.\n  repository(...args) {\n    this.validate(this.repository.entry, args);\n    return this.request(this.repository.entry, args);\n  }\n\n  // For a given branch of a repository, this will always point\n  // to a status page for the most recent task triggered by that\n  // branch.\n  // Note: This is a redirect rather than a direct link.\n  latest(...args) {\n    this.validate(this.latest.entry, args);\n    return this.request(this.latest.entry, args);\n  }\n\n  // For a given changeset (SHA) of a repository, this will attach a \"commit status\"\n  // on github. These statuses are links displayed next to each revision.\n  // The status is either OK (green check) or FAILURE (red cross),\n  // made of a custom title and link.\n  createStatus(...args) {\n    this.validate(this.createStatus.entry, args);\n    return this.request(this.createStatus.entry, args);\n  }\n\n  // For a given Issue or Pull Request of a repository, this will write a new message.\n  createComment(...args) {\n    this.validate(this.createComment.entry, args);\n    return this.request(this.createComment.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Github.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class GithubEvents extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: '',\n      exchangePrefix: 'exchange/taskcluster-github/v1/',\n      ...options\n    });\n  }\n\n  // When a GitHub pull request event is posted it will be broadcast on this\n  // exchange with the designated `organization` and `repository`\n  // in the routing-key along with event specific metadata in the payload.\n  pullRequest(pattern) {\n    const entry = {type:'topic-exchange',exchange:'pull-request',name:'pullRequest',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'organization',multipleWords:false,required:true},{name:'repository',multipleWords:false,required:true},{name:'action',multipleWords:false,required:true}],schema:'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // When a GitHub push event is posted it will be broadcast on this\n  // exchange with the designated `organization` and `repository`\n  // in the routing-key along with event specific metadata in the payload.\n  push(pattern) {\n    const entry = {type:'topic-exchange',exchange:'push',name:'push',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'organization',multipleWords:false,required:true},{name:'repository',multipleWords:false,required:true}],schema:'http://schemas.taskcluster.net/github/v1/github-push-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // When a GitHub release event is posted it will be broadcast on this\n  // exchange with the designated `organization` and `repository`\n  // in the routing-key along with event specific metadata in the payload.\n  release(pattern) {\n    const entry = {type:'topic-exchange',exchange:'release',name:'release',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'organization',multipleWords:false,required:true},{name:'repository',multipleWords:false,required:true}],schema:'http://schemas.taskcluster.net/github/v1/github-release-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/GithubEvents.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Hooks extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://hooks.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.listHookGroups.entry = {type:'function',method:'get',route:'/hooks',query:[],args:[],name:'listHookGroups',stability:'experimental',output:true}; // eslint-disable-line\n    this.listHooks.entry = {type:'function',method:'get',route:'/hooks/<hookGroupId>',query:[],args:['hookGroupId'],name:'listHooks',stability:'experimental',output:true}; // eslint-disable-line\n    this.hook.entry = {type:'function',method:'get',route:'/hooks/<hookGroupId>/<hookId>',query:[],args:['hookGroupId','hookId'],name:'hook',stability:'experimental',output:true}; // eslint-disable-line\n    this.getHookStatus.entry = {type:'function',method:'get',route:'/hooks/<hookGroupId>/<hookId>/status',query:[],args:['hookGroupId','hookId'],name:'getHookStatus',stability:'experimental',output:true}; // eslint-disable-line\n    this.getHookSchedule.entry = {type:'function',method:'get',route:'/hooks/<hookGroupId>/<hookId>/schedule',query:[],args:['hookGroupId','hookId'],name:'getHookSchedule',stability:'deprecated',output:true}; // eslint-disable-line\n    this.createHook.entry = {type:'function',method:'put',route:'/hooks/<hookGroupId>/<hookId>',query:[],args:['hookGroupId','hookId'],name:'createHook',stability:'experimental',scopes:{AllOf:['hooks:modify-hook:<hookGroupId>/<hookId>','assume:hook-id:<hookGroupId>/<hookId>']},input:true,output:true}; // eslint-disable-line\n    this.updateHook.entry = {type:'function',method:'post',route:'/hooks/<hookGroupId>/<hookId>',query:[],args:['hookGroupId','hookId'],name:'updateHook',stability:'experimental',scopes:{AllOf:['hooks:modify-hook:<hookGroupId>/<hookId>','assume:hook-id:<hookGroupId>/<hookId>']},input:true,output:true}; // eslint-disable-line\n    this.removeHook.entry = {type:'function',method:'delete',route:'/hooks/<hookGroupId>/<hookId>',query:[],args:['hookGroupId','hookId'],name:'removeHook',stability:'experimental',scopes:{AllOf:['hooks:modify-hook:<hookGroupId>/<hookId>']}}; // eslint-disable-line\n    this.triggerHook.entry = {type:'function',method:'post',route:'/hooks/<hookGroupId>/<hookId>/trigger',query:[],args:['hookGroupId','hookId'],name:'triggerHook',stability:'experimental',scopes:{AllOf:['hooks:trigger-hook:<hookGroupId>/<hookId>']},input:true,output:true}; // eslint-disable-line\n    this.getTriggerToken.entry = {type:'function',method:'get',route:'/hooks/<hookGroupId>/<hookId>/token',query:[],args:['hookGroupId','hookId'],name:'getTriggerToken',stability:'experimental',scopes:{AllOf:['hooks:get-trigger-token:<hookGroupId>/<hookId>']},output:true}; // eslint-disable-line\n    this.resetTriggerToken.entry = {type:'function',method:'post',route:'/hooks/<hookGroupId>/<hookId>/token',query:[],args:['hookGroupId','hookId'],name:'resetTriggerToken',stability:'experimental',scopes:{AllOf:['hooks:reset-trigger-token:<hookGroupId>/<hookId>']},output:true}; // eslint-disable-line\n    this.triggerHookWithToken.entry = {type:'function',method:'post',route:'/hooks/<hookGroupId>/<hookId>/trigger/<token>',query:[],args:['hookGroupId','hookId','token'],name:'triggerHookWithToken',stability:'experimental',input:true,output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // This endpoint will return a list of all hook groups with at least one hook.\n  listHookGroups(...args) {\n    this.validate(this.listHookGroups.entry, args);\n    return this.request(this.listHookGroups.entry, args);\n  }\n\n  // This endpoint will return a list of all the hook definitions within a\n  // given hook group.\n  listHooks(...args) {\n    this.validate(this.listHooks.entry, args);\n    return this.request(this.listHooks.entry, args);\n  }\n\n  // This endpoint will return the hook definition for the given `hookGroupId`\n  // and hookId.\n  hook(...args) {\n    this.validate(this.hook.entry, args);\n    return this.request(this.hook.entry, args);\n  }\n\n  // This endpoint will return the current status of the hook.  This represents a\n  // snapshot in time and may vary from one call to the next.\n  getHookStatus(...args) {\n    this.validate(this.getHookStatus.entry, args);\n    return this.request(this.getHookStatus.entry, args);\n  }\n\n  // This endpoint will return the schedule and next scheduled creation time\n  // for the given hook.\n  getHookSchedule(...args) {\n    this.validate(this.getHookSchedule.entry, args);\n    return this.request(this.getHookSchedule.entry, args);\n  }\n\n  // This endpoint will create a new hook.\n  // The caller's credentials must include the role that will be used to\n  // create the task.  That role must satisfy task.scopes as well as the\n  // necessary scopes to add the task to the queue.\n  createHook(...args) {\n    this.validate(this.createHook.entry, args);\n    return this.request(this.createHook.entry, args);\n  }\n\n  // This endpoint will update an existing hook.  All fields except\n  // `hookGroupId` and `hookId` can be modified.\n  updateHook(...args) {\n    this.validate(this.updateHook.entry, args);\n    return this.request(this.updateHook.entry, args);\n  }\n\n  // This endpoint will remove a hook definition.\n  removeHook(...args) {\n    this.validate(this.removeHook.entry, args);\n    return this.request(this.removeHook.entry, args);\n  }\n\n  // This endpoint will trigger the creation of a task from a hook definition.\n  // The HTTP payload must match the hooks `triggerSchema`.  If it does, it is\n  // provided as the `payload` property of the JSON-e context used to render the\n  // task template.\n  triggerHook(...args) {\n    this.validate(this.triggerHook.entry, args);\n    return this.request(this.triggerHook.entry, args);\n  }\n\n  // Retrieve a unique secret token for triggering the specified hook. This\n  // token can be deactivated with `resetTriggerToken`.\n  getTriggerToken(...args) {\n    this.validate(this.getTriggerToken.entry, args);\n    return this.request(this.getTriggerToken.entry, args);\n  }\n\n  // Reset the token for triggering a given hook. This invalidates token that\n  // may have been issued via getTriggerToken with a new token.\n  resetTriggerToken(...args) {\n    this.validate(this.resetTriggerToken.entry, args);\n    return this.request(this.resetTriggerToken.entry, args);\n  }\n\n  // This endpoint triggers a defined hook with a valid token.\n  // The HTTP payload must match the hooks `triggerSchema`.  If it does, it is\n  // provided as the `payload` property of the JSON-e context used to render the\n  // task template.\n  triggerHookWithToken(...args) {\n    this.validate(this.triggerHookWithToken.entry, args);\n    return this.request(this.triggerHookWithToken.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Hooks.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Index extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://index.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.findTask.entry = {type:'function',method:'get',route:'/task/<indexPath>',query:[],args:['indexPath'],name:'findTask',stability:'stable',output:true}; // eslint-disable-line\n    this.listNamespaces.entry = {type:'function',method:'post',route:'/namespaces/<namespace>',query:[],args:['namespace'],name:'listNamespaces',stability:'stable',input:true,output:true}; // eslint-disable-line\n    this.listTasks.entry = {type:'function',method:'post',route:'/tasks/<namespace>',query:[],args:['namespace'],name:'listTasks',stability:'stable',input:true,output:true}; // eslint-disable-line\n    this.insertTask.entry = {type:'function',method:'put',route:'/task/<namespace>',query:[],args:['namespace'],name:'insertTask',stability:'stable',scopes:[['index:insert-task:<namespace>']],input:true,output:true}; // eslint-disable-line\n    this.findArtifactFromTask.entry = {type:'function',method:'get',route:'/task/<indexPath>/artifacts/<name>',query:[],args:['indexPath','name'],name:'findArtifactFromTask',stability:'stable',scopes:[['queue:get-artifact:<name>']]}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Find a task by index path, returning the highest-rank task with that path. If no\n  // task exists for the given path, this API end-point will respond with a 404 status.\n  findTask(...args) {\n    this.validate(this.findTask.entry, args);\n    return this.request(this.findTask.entry, args);\n  }\n\n  // List the namespaces immediately under a given namespace.\n  // This endpoint\n  // lists up to 1000 namespaces. If more namespaces are present, a\n  // `continuationToken` will be returned, which can be given in the next\n  // request. For the initial request, the payload should be an empty JSON\n  // object.\n  listNamespaces(...args) {\n    this.validate(this.listNamespaces.entry, args);\n    return this.request(this.listNamespaces.entry, args);\n  }\n\n  // List the tasks immediately under a given namespace.\n  // This endpoint\n  // lists up to 1000 tasks. If more tasks are present, a\n  // `continuationToken` will be returned, which can be given in the next\n  // request. For the initial request, the payload should be an empty JSON\n  // object.\n  // **Remark**, this end-point is designed for humans browsing for tasks, not\n  // services, as that makes little sense.\n  listTasks(...args) {\n    this.validate(this.listTasks.entry, args);\n    return this.request(this.listTasks.entry, args);\n  }\n\n  // Insert a task into the index.  If the new rank is less than the existing rank\n  // at the given index path, the task is not indexed but the response is still 200 OK.\n  // Please see the introduction above for information\n  // about indexing successfully completed tasks automatically using custom routes.\n  insertTask(...args) {\n    this.validate(this.insertTask.entry, args);\n    return this.request(this.insertTask.entry, args);\n  }\n\n  // Find a task by index path and redirect to the artifact on the most recent\n  // run with the given `name`.\n  // Note that multiple calls to this endpoint may return artifacts from differen tasks\n  // if a new task is inserted into the index between calls. Avoid using this method as\n  // a stable link to multiple, connected files if the index path does not contain a\n  // unique identifier.  For example, the following two links may return unrelated files:\n  // * https://index.taskcluster.net/task/some-app.win64.latest.installer/artifacts/public/installer.exe`\n  // * https://index.taskcluster.net/task/some-app.win64.latest.installer/artifacts/public/debug-symbols.zip`\n  // This problem be remedied by including the revision in the index path or by bundling both\n  // installer and debug symbols into a single artifact.\n  // If no task exists for the given index path, this API end-point responds with 404.\n  findArtifactFromTask(...args) {\n    this.validate(this.findArtifactFromTask.entry, args);\n    return this.request(this.findArtifactFromTask.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Index.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Login extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://login.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.oidcCredentials.entry = {type:'function',method:'get',route:'/oidc-credentials/<provider>',query:[],args:['provider'],name:'oidcCredentials',stability:'experimental',output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Given an OIDC `access_token` from a trusted OpenID provider, return a\n  // set of Taskcluster credentials for use on behalf of the identified\n  // user.\n  // This method is typically not called with a Taskcluster client library\n  // and does not accept Hawk credentials. The `access_token` should be\n  // given in an `Authorization` header:\n  // ```\n  // Authorization: Bearer abc.xyz\n  // ```\n  // The `access_token` is first verified against the named\n  // :provider, then passed to the provider's API to retrieve a user\n  // profile. That profile is then used to generate Taskcluster credentials\n  // appropriate to the user. Note that the resulting credentials may or may\n  // not include a `certificate` property. Callers should be prepared for either\n  // alternative.\n  // The given credentials will expire in a relatively short time. Callers should\n  // monitor this expiration and refresh the credentials if necessary, by calling\n  // this endpoint again, if they have expired.\n  oidcCredentials(...args) {\n    this.validate(this.oidcCredentials.entry, args);\n    return this.request(this.oidcCredentials.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Login.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Notify extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://notify.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.email.entry = {type:'function',method:'post',route:'/email',query:[],args:[],name:'email',stability:'experimental',scopes:{AllOf:['notify:email:<address>']},input:true}; // eslint-disable-line\n    this.pulse.entry = {type:'function',method:'post',route:'/pulse',query:[],args:[],name:'pulse',stability:'experimental',scopes:{AllOf:['notify:pulse:<routingKey>']},input:true}; // eslint-disable-line\n    this.irc.entry = {type:'function',method:'post',route:'/irc',query:[],args:[],name:'irc',stability:'experimental',scopes:{AllOf:[{'if':'channelRequest',then:{AllOf:['notify:irc-channel:<channel>']}},{'if':'userRequest',then:{AllOf:['notify:irc-user:<user>']}}]},input:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Send an email to `address`. The content is markdown and will be rendered\n  // to HTML, but both the HTML and raw markdown text will be sent in the\n  // email. If a link is included, it will be rendered to a nice button in the\n  // HTML version of the email\n  email(...args) {\n    this.validate(this.email.entry, args);\n    return this.request(this.email.entry, args);\n  }\n\n  // Publish a message on pulse with the given `routingKey`.\n  pulse(...args) {\n    this.validate(this.pulse.entry, args);\n    return this.request(this.pulse.entry, args);\n  }\n\n  // Post a message on IRC to a specific channel or user, or a specific user\n  // on a specific channel.\n  // Success of this API method does not imply the message was successfully\n  // posted. This API method merely inserts the IRC message into a queue\n  // that will be processed by a background process.\n  // This allows us to re-send the message in face of connection issues.\n  // However, if the user isn't online the message will be dropped without\n  // error. We maybe improve this behavior in the future. For now just keep\n  // in mind that IRC is a best-effort service.\n  irc(...args) {\n    this.validate(this.irc.entry, args);\n    return this.request(this.irc.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Notify.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Pulse extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://pulse.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.overview.entry = {type:'function',method:'get',route:'/overview',query:[],args:[],name:'overview',stability:'experimental',output:true}; // eslint-disable-line\n    this.listNamespaces.entry = {type:'function',method:'get',route:'/namespaces',query:['limit','continuation'],args:[],name:'listNamespaces',stability:'experimental',output:true}; // eslint-disable-line\n    this.namespace.entry = {type:'function',method:'get',route:'/namespace/<namespace>',query:[],args:['namespace'],name:'namespace',stability:'experimental',output:true}; // eslint-disable-line\n    this.claimNamespace.entry = {type:'function',method:'post',route:'/namespace/<namespace>',query:[],args:['namespace'],name:'claimNamespace',stability:'experimental',scopes:[['pulse:namespace:<namespace>']],input:true,output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Get an overview of the Rabbit cluster.\n  overview(...args) {\n    this.validate(this.overview.entry, args);\n    return this.request(this.overview.entry, args);\n  }\n\n  // List the namespaces managed by this service.\n  // This will list up to 1000 namespaces. If more namespaces are present a\n  // `continuationToken` will be returned, which can be given in the next\n  // request. For the initial request, do not provide continuation.\n  listNamespaces(...args) {\n    this.validate(this.listNamespaces.entry, args);\n    return this.request(this.listNamespaces.entry, args);\n  }\n\n  // Get public information about a single namespace. This is the same information\n  // as returned by `listNamespaces`.\n  namespace(...args) {\n    this.validate(this.namespace.entry, args);\n    return this.request(this.namespace.entry, args);\n  }\n\n  // Claim a namespace, returning a username and password with access to that\n  // namespace good for a short time.  Clients should call this endpoint again\n  // at the re-claim time given in the response, as the password will be rotated\n  // soon after that time.  The namespace will expire, and any associated queues\n  // and exchanges will be deleted, at the given expiration time.\n  // The `expires` and `contact` properties can be updated at any time in a reclaim\n  // operation.\n  claimNamespace(...args) {\n    this.validate(this.claimNamespace.entry, args);\n    return this.request(this.claimNamespace.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Pulse.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class PurgeCache extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://purge-cache.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.purgeCache.entry = {type:'function',method:'post',route:'/purge-cache/<provisionerId>/<workerType>',query:[],args:['provisionerId','workerType'],name:'purgeCache',stability:'experimental',scopes:[['purge-cache:<provisionerId>/<workerType>:<cacheName>']],input:true}; // eslint-disable-line\n    this.allPurgeRequests.entry = {type:'function',method:'get',route:'/purge-cache/list',query:['continuationToken','limit'],args:[],name:'allPurgeRequests',stability:'experimental',output:true}; // eslint-disable-line\n    this.purgeRequests.entry = {type:'function',method:'get',route:'/purge-cache/<provisionerId>/<workerType>',query:['since'],args:['provisionerId','workerType'],name:'purgeRequests',stability:'experimental',output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Publish a purge-cache message to purge caches named `cacheName` with\n  // `provisionerId` and `workerType` in the routing-key. Workers should\n  // be listening for this message and purge caches when they see it.\n  purgeCache(...args) {\n    this.validate(this.purgeCache.entry, args);\n    return this.request(this.purgeCache.entry, args);\n  }\n\n  // This is useful mostly for administors to view\n  // the set of open purge requests. It should not\n  // be used by workers. They should use the purgeRequests\n  // endpoint that is specific to their workerType and\n  // provisionerId.\n  allPurgeRequests(...args) {\n    this.validate(this.allPurgeRequests.entry, args);\n    return this.request(this.allPurgeRequests.entry, args);\n  }\n\n  // List of caches that need to be purged if they are from before\n  // a certain time. This is safe to be used in automation from\n  // workers.\n  purgeRequests(...args) {\n    this.validate(this.purgeRequests.entry, args);\n    return this.request(this.purgeRequests.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/PurgeCache.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class PurgeCacheEvents extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: '',\n      exchangePrefix: 'exchange/taskcluster-purge-cache/v1/',\n      ...options\n    });\n  }\n\n  // When a cache purge is requested  a message will be posted on this\n  // exchange with designated `provisionerId` and `workerType` in the\n  // routing-key and the name of the `cacheFolder` as payload\n  purgeCache(pattern) {\n    const entry = {type:'topic-exchange',exchange:'purge-cache',name:'purgeCache',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true}],schema:'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/PurgeCacheEvents.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Queue extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://queue.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.task.entry = {type:'function',method:'get',route:'/task/<taskId>',query:[],args:['taskId'],name:'task',stability:'stable',output:true}; // eslint-disable-line\n    this.status.entry = {type:'function',method:'get',route:'/task/<taskId>/status',query:[],args:['taskId'],name:'status',stability:'stable',output:true}; // eslint-disable-line\n    this.listTaskGroup.entry = {type:'function',method:'get',route:'/task-group/<taskGroupId>/list',query:['continuationToken','limit'],args:['taskGroupId'],name:'listTaskGroup',stability:'stable',output:true}; // eslint-disable-line\n    this.listDependentTasks.entry = {type:'function',method:'get',route:'/task/<taskId>/dependents',query:['continuationToken','limit'],args:['taskId'],name:'listDependentTasks',stability:'stable',output:true}; // eslint-disable-line\n    this.createTask.entry = {type:'function',method:'put',route:'/task/<taskId>',query:[],args:['taskId'],name:'createTask',stability:'stable',scopes:[['queue:create-task:<priority>:<provisionerId>/<workerType>','queue:scheduler-id:<schedulerId>']],input:true,output:true}; // eslint-disable-line\n    this.defineTask.entry = {type:'function',method:'post',route:'/task/<taskId>/define',query:[],args:['taskId'],name:'defineTask',stability:'deprecated',scopes:[['queue:create-task:<priority>:<provisionerId>/<workerType>','queue:scheduler-id:<schedulerId>']],input:true,output:true}; // eslint-disable-line\n    this.scheduleTask.entry = {type:'function',method:'post',route:'/task/<taskId>/schedule',query:[],args:['taskId'],name:'scheduleTask',stability:'stable',scopes:[['queue:schedule-task','assume:scheduler-id:<schedulerId>/<taskGroupId>'],['queue:schedule-task:<schedulerId>/<taskGroupId>/<taskId>']],output:true}; // eslint-disable-line\n    this.rerunTask.entry = {type:'function',method:'post',route:'/task/<taskId>/rerun',query:[],args:['taskId'],name:'rerunTask',stability:'deprecated',scopes:[['queue:rerun-task','assume:scheduler-id:<schedulerId>/<taskGroupId>'],['queue:rerun-task:<schedulerId>/<taskGroupId>/<taskId>']],output:true}; // eslint-disable-line\n    this.cancelTask.entry = {type:'function',method:'post',route:'/task/<taskId>/cancel',query:[],args:['taskId'],name:'cancelTask',stability:'stable',scopes:[['queue:cancel-task','assume:scheduler-id:<schedulerId>/<taskGroupId>'],['queue:cancel-task:<schedulerId>/<taskGroupId>/<taskId>']],output:true}; // eslint-disable-line\n    this.pollTaskUrls.entry = {type:'function',method:'get',route:'/poll-task-url/<provisionerId>/<workerType>',query:[],args:['provisionerId','workerType'],name:'pollTaskUrls',stability:'stable',scopes:[['queue:poll-task-urls','assume:worker-type:<provisionerId>/<workerType>'],['queue:poll-task-urls:<provisionerId>/<workerType>']],output:true}; // eslint-disable-line\n    this.claimWork.entry = {type:'function',method:'post',route:'/claim-work/<provisionerId>/<workerType>',query:[],args:['provisionerId','workerType'],name:'claimWork',stability:'stable',scopes:[['queue:claim-work:<provisionerId>/<workerType>','queue:worker-id:<workerGroup>/<workerId>']],input:true,output:true}; // eslint-disable-line\n    this.claimTask.entry = {type:'function',method:'post',route:'/task/<taskId>/runs/<runId>/claim',query:[],args:['taskId','runId'],name:'claimTask',stability:'stable',scopes:[['queue:claim-task','assume:worker-type:<provisionerId>/<workerType>','assume:worker-id:<workerGroup>/<workerId>'],['queue:claim-task:<provisionerId>/<workerType>','queue:worker-id:<workerGroup>/<workerId>']],input:true,output:true}; // eslint-disable-line\n    this.reclaimTask.entry = {type:'function',method:'post',route:'/task/<taskId>/runs/<runId>/reclaim',query:[],args:['taskId','runId'],name:'reclaimTask',stability:'stable',scopes:[['queue:claim-task','assume:worker-id:<workerGroup>/<workerId>'],['queue:reclaim-task:<taskId>/<runId>']],output:true}; // eslint-disable-line\n    this.reportCompleted.entry = {type:'function',method:'post',route:'/task/<taskId>/runs/<runId>/completed',query:[],args:['taskId','runId'],name:'reportCompleted',stability:'stable',scopes:[['queue:resolve-task','assume:worker-id:<workerGroup>/<workerId>'],['queue:resolve-task:<taskId>/<runId>']],output:true}; // eslint-disable-line\n    this.reportFailed.entry = {type:'function',method:'post',route:'/task/<taskId>/runs/<runId>/failed',query:[],args:['taskId','runId'],name:'reportFailed',stability:'stable',scopes:[['queue:resolve-task','assume:worker-id:<workerGroup>/<workerId>'],['queue:resolve-task:<taskId>/<runId>']],output:true}; // eslint-disable-line\n    this.reportException.entry = {type:'function',method:'post',route:'/task/<taskId>/runs/<runId>/exception',query:[],args:['taskId','runId'],name:'reportException',stability:'stable',scopes:[['queue:resolve-task','assume:worker-id:<workerGroup>/<workerId>'],['queue:resolve-task:<taskId>/<runId>']],input:true,output:true}; // eslint-disable-line\n    this.createArtifact.entry = {type:'function',method:'post',route:'/task/<taskId>/runs/<runId>/artifacts/<name>',query:[],args:['taskId','runId','name'],name:'createArtifact',stability:'stable',scopes:[['queue:create-artifact:<name>','assume:worker-id:<workerGroup>/<workerId>'],['queue:create-artifact:<taskId>/<runId>']],input:true,output:true}; // eslint-disable-line\n    this.completeArtifact.entry = {type:'function',method:'put',route:'/task/<taskId>/runs/<runId>/artifacts/<name>',query:[],args:['taskId','runId','name'],name:'completeArtifact',stability:'experimental',scopes:[['queue:create-artifact:<name>','assume:worker-id:<workerGroup>/<workerId>'],['queue:create-artifact:<taskId>/<runId>']],input:true}; // eslint-disable-line\n    this.getArtifact.entry = {type:'function',method:'get',route:'/task/<taskId>/runs/<runId>/artifacts/<name>',query:[],args:['taskId','runId','name'],name:'getArtifact',stability:'stable',scopes:[['queue:get-artifact:<name>']]}; // eslint-disable-line\n    this.getLatestArtifact.entry = {type:'function',method:'get',route:'/task/<taskId>/artifacts/<name>',query:[],args:['taskId','name'],name:'getLatestArtifact',stability:'stable',scopes:[['queue:get-artifact:<name>']]}; // eslint-disable-line\n    this.listArtifacts.entry = {type:'function',method:'get',route:'/task/<taskId>/runs/<runId>/artifacts',query:['continuationToken','limit'],args:['taskId','runId'],name:'listArtifacts',stability:'experimental',output:true}; // eslint-disable-line\n    this.listLatestArtifacts.entry = {type:'function',method:'get',route:'/task/<taskId>/artifacts',query:['continuationToken','limit'],args:['taskId'],name:'listLatestArtifacts',stability:'experimental',output:true}; // eslint-disable-line\n    this.listProvisioners.entry = {type:'function',method:'get',route:'/provisioners',query:['continuationToken','limit'],args:[],name:'listProvisioners',stability:'experimental',output:true}; // eslint-disable-line\n    this.getProvisioner.entry = {type:'function',method:'get',route:'/provisioners/<provisionerId>',query:[],args:['provisionerId'],name:'getProvisioner',stability:'experimental',output:true}; // eslint-disable-line\n    this.declareProvisioner.entry = {type:'function',method:'put',route:'/provisioners/<provisionerId>',query:[],args:['provisionerId'],name:'declareProvisioner',stability:'experimental',scopes:[['queue:declare-provisioner:<provisionerId>#<property>']],input:true,output:true}; // eslint-disable-line\n    this.pendingTasks.entry = {type:'function',method:'get',route:'/pending/<provisionerId>/<workerType>',query:[],args:['provisionerId','workerType'],name:'pendingTasks',stability:'stable',output:true}; // eslint-disable-line\n    this.listWorkerTypes.entry = {type:'function',method:'get',route:'/provisioners/<provisionerId>/worker-types',query:['continuationToken','limit'],args:['provisionerId'],name:'listWorkerTypes',stability:'experimental',output:true}; // eslint-disable-line\n    this.getWorkerType.entry = {type:'function',method:'get',route:'/provisioners/<provisionerId>/worker-types/<workerType>',query:[],args:['provisionerId','workerType'],name:'getWorkerType',stability:'experimental',output:true}; // eslint-disable-line\n    this.declareWorkerType.entry = {type:'function',method:'put',route:'/provisioners/<provisionerId>/worker-types/<workerType>',query:[],args:['provisionerId','workerType'],name:'declareWorkerType',stability:'experimental',scopes:[['queue:declare-worker-type:<provisionerId>/<workerType>#<property>']],input:true,output:true}; // eslint-disable-line\n    this.listWorkers.entry = {type:'function',method:'get',route:'/provisioners/<provisionerId>/worker-types/<workerType>/workers',query:['continuationToken','limit','quarantined'],args:['provisionerId','workerType'],name:'listWorkers',stability:'experimental',output:true}; // eslint-disable-line\n    this.getWorker.entry = {type:'function',method:'get',route:'/provisioners/<provisionerId>/worker-types/<workerType>/workers/<workerGroup>/<workerId>',query:[],args:['provisionerId','workerType','workerGroup','workerId'],name:'getWorker',stability:'experimental',output:true}; // eslint-disable-line\n    this.quarantineWorker.entry = {type:'function',method:'put',route:'/provisioners/<provisionerId>/worker-types/<workerType>/workers/<workerGroup>/<workerId>',query:[],args:['provisionerId','workerType','workerGroup','workerId'],name:'quarantineWorker',stability:'experimental',scopes:[['queue:quarantine-worker:<provisionerId>/<workerType>/<workerGroup>/<workerId>']],input:true,output:true}; // eslint-disable-line\n    this.declareWorker.entry = {type:'function',method:'put',route:'/provisioners/<provisionerId>/worker-types/<workerType>/<workerGroup>/<workerId>',query:[],args:['provisionerId','workerType','workerGroup','workerId'],name:'declareWorker',stability:'experimental',scopes:[['queue:declare-worker:<provisionerId>/<workerType>/<workerGroup>/<workerId>#<property>']],input:true,output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // This end-point will return the task-definition. Notice that the task\n  // definition may have been modified by queue, if an optional property is\n  // not specified the queue may provide a default value.\n  task(...args) {\n    this.validate(this.task.entry, args);\n    return this.request(this.task.entry, args);\n  }\n\n  // Get task status structure from `taskId`\n  status(...args) {\n    this.validate(this.status.entry, args);\n    return this.request(this.status.entry, args);\n  }\n\n  // List tasks sharing the same `taskGroupId`.\n  // As a task-group may contain an unbounded number of tasks, this end-point\n  // may return a `continuationToken`. To continue listing tasks you must call\n  // the `listTaskGroup` again with the `continuationToken` as the\n  // query-string option `continuationToken`.\n  // By default this end-point will try to return up to 1000 members in one\n  // request. But it **may return less**, even if more tasks are available.\n  // It may also return a `continuationToken` even though there are no more\n  // results. However, you can only be sure to have seen all results if you\n  // keep calling `listTaskGroup` with the last `continuationToken` until you\n  // get a result without a `continuationToken`.\n  // If you are not interested in listing all the members at once, you may\n  // use the query-string option `limit` to return fewer.\n  listTaskGroup(...args) {\n    this.validate(this.listTaskGroup.entry, args);\n    return this.request(this.listTaskGroup.entry, args);\n  }\n\n  // List tasks that depend on the given `taskId`.\n  // As many tasks from different task-groups may dependent on a single tasks,\n  // this end-point may return a `continuationToken`. To continue listing\n  // tasks you must call `listDependentTasks` again with the\n  // `continuationToken` as the query-string option `continuationToken`.\n  // By default this end-point will try to return up to 1000 tasks in one\n  // request. But it **may return less**, even if more tasks are available.\n  // It may also return a `continuationToken` even though there are no more\n  // results. However, you can only be sure to have seen all results if you\n  // keep calling `listDependentTasks` with the last `continuationToken` until\n  // you get a result without a `continuationToken`.\n  // If you are not interested in listing all the tasks at once, you may\n  // use the query-string option `limit` to return fewer.\n  listDependentTasks(...args) {\n    this.validate(this.listDependentTasks.entry, args);\n    return this.request(this.listDependentTasks.entry, args);\n  }\n\n  // Create a new task, this is an **idempotent** operation, so repeat it if\n  // you get an internal server error or network connection is dropped.\n  // **Task `deadline´**, the deadline property can be no more than 5 days\n  // into the future. This is to limit the amount of pending tasks not being\n  // taken care of. Ideally, you should use a much shorter deadline.\n  // **Task expiration**, the `expires` property must be greater than the\n  // task `deadline`. If not provided it will default to `deadline` + one\n  // year. Notice, that artifacts created by task must expire before the task.\n  // **Task specific routing-keys**, using the `task.routes` property you may\n  // define task specific routing-keys. If a task has a task specific\n  // routing-key: `<route>`, then when the AMQP message about the task is\n  // published, the message will be CC'ed with the routing-key:\n  // `route.<route>`. This is useful if you want another component to listen\n  // for completed tasks you have posted.  The caller must have scope\n  // `queue:route:<route>` for each route.\n  // **Dependencies**, any tasks referenced in `task.dependencies` must have\n  // already been created at the time of this call.\n  // **Important** Any scopes the task requires are also required for creating\n  // the task. Please see the Request Payload (Task Definition) for details.\n  createTask(...args) {\n    this.validate(this.createTask.entry, args);\n    return this.request(this.createTask.entry, args);\n  }\n\n  // **Deprecated**, this is the same as `createTask` with a **self-dependency**.\n  // This is only present for legacy.\n  defineTask(...args) {\n    this.validate(this.defineTask.entry, args);\n    return this.request(this.defineTask.entry, args);\n  }\n\n  // scheduleTask will schedule a task to be executed, even if it has\n  // unresolved dependencies. A task would otherwise only be scheduled if\n  // its dependencies were resolved.\n  // This is useful if you have defined a task that depends on itself or on\n  // some other task that has not been resolved, but you wish the task to be\n  // scheduled immediately.\n  // This will announce the task as pending and workers will be allowed to\n  // claim it and resolve the task.\n  // **Note** this operation is **idempotent** and will not fail or complain\n  // if called with a `taskId` that is already scheduled, or even resolved.\n  // To reschedule a task previously resolved, use `rerunTask`.\n  scheduleTask(...args) {\n    this.validate(this.scheduleTask.entry, args);\n    return this.request(this.scheduleTask.entry, args);\n  }\n\n  // This method _reruns_ a previously resolved task, even if it was\n  // _completed_. This is useful if your task completes unsuccessfully, and\n  // you just want to run it from scratch again. This will also reset the\n  // number of `retries` allowed.\n  // Remember that `retries` in the task status counts the number of runs that\n  // the queue have started because the worker stopped responding, for example\n  // because a spot node died.\n  // **Remark** this operation is idempotent, if you try to rerun a task that\n  // is not either `failed` or `completed`, this operation will just return\n  // the current task status.\n  rerunTask(...args) {\n    this.validate(this.rerunTask.entry, args);\n    return this.request(this.rerunTask.entry, args);\n  }\n\n  // This method will cancel a task that is either `unscheduled`, `pending` or\n  // `running`. It will resolve the current run as `exception` with\n  // `reasonResolved` set to `canceled`. If the task isn't scheduled yet, ie.\n  // it doesn't have any runs, an initial run will be added and resolved as\n  // described above. Hence, after canceling a task, it cannot be scheduled\n  // with `queue.scheduleTask`, but a new run can be created with\n  // `queue.rerun`. These semantics is equivalent to calling\n  // `queue.scheduleTask` immediately followed by `queue.cancelTask`.\n  // **Remark** this operation is idempotent, if you try to cancel a task that\n  // isn't `unscheduled`, `pending` or `running`, this operation will just\n  // return the current task status.\n  cancelTask(...args) {\n    this.validate(this.cancelTask.entry, args);\n    return this.request(this.cancelTask.entry, args);\n  }\n\n  // Get a signed URLs to get and delete messages from azure queue.\n  // Once messages are polled from here, you can claim the referenced task\n  // with `claimTask`, and afterwards you should always delete the message.\n  pollTaskUrls(...args) {\n    this.validate(this.pollTaskUrls.entry, args);\n    return this.request(this.pollTaskUrls.entry, args);\n  }\n\n  // Claim any task, more to be added later... long polling up to 20s.\n  claimWork(...args) {\n    this.validate(this.claimWork.entry, args);\n    return this.request(this.claimWork.entry, args);\n  }\n\n  // claim a task, more to be added later...\n  claimTask(...args) {\n    this.validate(this.claimTask.entry, args);\n    return this.request(this.claimTask.entry, args);\n  }\n\n  // Refresh the claim for a specific `runId` for given `taskId`. This updates\n  // the `takenUntil` property and returns a new set of temporary credentials\n  // for performing requests on behalf of the task. These credentials should\n  // be used in-place of the credentials returned by `claimWork`.\n  // The `reclaimTask` requests serves to:\n  //  * Postpone `takenUntil` preventing the queue from resolving\n  //    `claim-expired`,\n  //  * Refresh temporary credentials used for processing the task, and\n  //  * Abort execution if the task/run have been resolved.\n  // If the `takenUntil` timestamp is exceeded the queue will resolve the run\n  // as _exception_ with reason `claim-expired`, and proceeded to retry to the\n  // task. This ensures that tasks are retried, even if workers disappear\n  // without warning.\n  // If the task is resolved, this end-point will return `409` reporting\n  // `RequestConflict`. This typically happens if the task have been canceled\n  // or the `task.deadline` have been exceeded. If reclaiming fails, workers\n  // should abort the task and forget about the given `runId`. There is no\n  // need to resolve the run or upload artifacts.\n  reclaimTask(...args) {\n    this.validate(this.reclaimTask.entry, args);\n    return this.request(this.reclaimTask.entry, args);\n  }\n\n  // Report a task completed, resolving the run as `completed`.\n  reportCompleted(...args) {\n    this.validate(this.reportCompleted.entry, args);\n    return this.request(this.reportCompleted.entry, args);\n  }\n\n  // Report a run failed, resolving the run as `failed`. Use this to resolve\n  // a run that failed because the task specific code behaved unexpectedly.\n  // For example the task exited non-zero, or didn't produce expected output.\n  // Do not use this if the task couldn't be run because if malformed\n  // payload, or other unexpected condition. In these cases we have a task\n  // exception, which should be reported with `reportException`.\n  reportFailed(...args) {\n    this.validate(this.reportFailed.entry, args);\n    return this.request(this.reportFailed.entry, args);\n  }\n\n  // Resolve a run as _exception_. Generally, you will want to report tasks as\n  // failed instead of exception. You should `reportException` if,\n  //   * The `task.payload` is invalid,\n  //   * Non-existent resources are referenced,\n  //   * Declared actions cannot be executed due to unavailable resources,\n  //   * The worker had to shutdown prematurely,\n  //   * The worker experienced an unknown error, or,\n  //   * The task explicitly requested a retry.\n  // Do not use this to signal that some user-specified code crashed for any\n  // reason specific to this code. If user-specific code hits a resource that\n  // is temporarily unavailable worker should report task _failed_.\n  reportException(...args) {\n    this.validate(this.reportException.entry, args);\n    return this.request(this.reportException.entry, args);\n  }\n\n  // This API end-point creates an artifact for a specific run of a task. This\n  // should **only** be used by a worker currently operating on this task, or\n  // from a process running within the task (ie. on the worker).\n  // All artifacts must specify when they `expires`, the queue will\n  // automatically take care of deleting artifacts past their\n  // expiration point. This features makes it feasible to upload large\n  // intermediate artifacts from data processing applications, as the\n  // artifacts can be set to expire a few days later.\n  // We currently support 3 different `storageType`s, each storage type have\n  // slightly different features and in some cases difference semantics.\n  // We also have 2 deprecated `storageType`s which are only maintained for\n  // backwards compatiability and should not be used in new implementations\n  // **Blob artifacts**, are useful for storing large files.  Currently, these\n  // are all stored in S3 but there are facilities for adding support for other\n  // backends in futre.  A call for this type of artifact must provide information\n  // about the file which will be uploaded.  This includes sha256 sums and sizes.\n  // This method will return a list of general form HTTP requests which are signed\n  // by AWS S3 credentials managed by the Queue.  Once these requests are completed\n  // the list of `ETag` values returned by the requests must be passed to the\n  // queue `completeArtifact` method\n  // **S3 artifacts**, DEPRECATED is useful for static files which will be\n  // stored on S3. When creating an S3 artifact the queue will return a\n  // pre-signed URL to which you can do a `PUT` request to upload your\n  // artifact. Note that `PUT` request **must** specify the `content-length`\n  // header and **must** give the `content-type` header the same value as in\n  // the request to `createArtifact`.\n  // **Azure artifacts**, DEPRECATED are stored in _Azure Blob Storage_ service\n  // which given the consistency guarantees and API interface offered by Azure\n  // is more suitable for artifacts that will be modified during the execution\n  // of the task. For example docker-worker has a feature that persists the\n  // task log to Azure Blob Storage every few seconds creating a somewhat\n  // live log. A request to create an Azure artifact will return a URL\n  // featuring a [Shared-Access-Signature](http://msdn.microsoft.com/en-us/library/azure/dn140256.aspx),\n  // refer to MSDN for further information on how to use these.\n  // **Warning: azure artifact is currently an experimental feature subject\n  // to changes and data-drops.**\n  // **Reference artifacts**, only consists of meta-data which the queue will\n  // store for you. These artifacts really only have a `url` property and\n  // when the artifact is requested the client will be redirect the URL\n  // provided with a `303` (See Other) redirect. Please note that we cannot\n  // delete artifacts you upload to other service, we can only delete the\n  // reference to the artifact, when it expires.\n  // **Error artifacts**, only consists of meta-data which the queue will\n  // store for you. These artifacts are only meant to indicate that you the\n  // worker or the task failed to generate a specific artifact, that you\n  // would otherwise have uploaded. For example docker-worker will upload an\n  // error artifact, if the file it was supposed to upload doesn't exists or\n  // turns out to be a directory. Clients requesting an error artifact will\n  // get a `403` (Forbidden) response. This is mainly designed to ensure that\n  // dependent tasks can distinguish between artifacts that were suppose to\n  // be generated and artifacts for which the name is misspelled.\n  // **Artifact immutability**, generally speaking you cannot overwrite an\n  // artifact when created. But if you repeat the request with the same\n  // properties the request will succeed as the operation is idempotent.\n  // This is useful if you need to refresh a signed URL while uploading.\n  // Do not abuse this to overwrite artifacts created by another entity!\n  // Such as worker-host overwriting artifact created by worker-code.\n  // As a special case the `url` property on _reference artifacts_ can be\n  // updated. You should only use this to update the `url` property for\n  // reference artifacts your process has created.\n  createArtifact(...args) {\n    this.validate(this.createArtifact.entry, args);\n    return this.request(this.createArtifact.entry, args);\n  }\n\n  // This endpoint finalises an upload done through the blob `storageType`.\n  // The queue will ensure that the task/run is still allowing artifacts\n  // to be uploaded.  For single-part S3 blob artifacts, this endpoint\n  // will simply ensure the artifact is present in S3.  For multipart S3\n  // artifacts, the endpoint will perform the commit step of the multipart\n  // upload flow.  As the final step for both multi and single part artifacts,\n  // the `present` entity field will be set to `true` to reflect that the\n  // artifact is now present and a message published to pulse.  NOTE: This\n  // endpoint *must* be called for all artifacts of storageType 'blob'\n  completeArtifact(...args) {\n    this.validate(this.completeArtifact.entry, args);\n    return this.request(this.completeArtifact.entry, args);\n  }\n\n  // Get artifact by `<name>` from a specific run.\n  // **Public Artifacts**, in-order to get an artifact you need the scope\n  // `queue:get-artifact:<name>`, where `<name>` is the name of the artifact.\n  // But if the artifact `name` starts with `public/`, authentication and\n  // authorization is not necessary to fetch the artifact.\n  // **API Clients**, this method will redirect you to the artifact, if it is\n  // stored externally. Either way, the response may not be JSON. So API\n  // client users might want to generate a signed URL for this end-point and\n  // use that URL with a normal HTTP client.\n  // **Caching**, artifacts may be cached in data centers closer to the\n  // workers in-order to reduce bandwidth costs. This can lead to longer\n  // response times. Caching can be skipped by setting the header\n  // `x-taskcluster-skip-cache: true`, this should only be used for resources\n  // where request volume is known to be low, and caching not useful.\n  // (This feature may be disabled in the future, use is sparingly!)\n  getArtifact(...args) {\n    this.validate(this.getArtifact.entry, args);\n    return this.request(this.getArtifact.entry, args);\n  }\n\n  // Get artifact by `<name>` from the last run of a task.\n  // **Public Artifacts**, in-order to get an artifact you need the scope\n  // `queue:get-artifact:<name>`, where `<name>` is the name of the artifact.\n  // But if the artifact `name` starts with `public/`, authentication and\n  // authorization is not necessary to fetch the artifact.\n  // **API Clients**, this method will redirect you to the artifact, if it is\n  // stored externally. Either way, the response may not be JSON. So API\n  // client users might want to generate a signed URL for this end-point and\n  // use that URL with a normal HTTP client.\n  // **Remark**, this end-point is slightly slower than\n  // `queue.getArtifact`, so consider that if you already know the `runId` of\n  // the latest run. Otherwise, just us the most convenient API end-point.\n  getLatestArtifact(...args) {\n    this.validate(this.getLatestArtifact.entry, args);\n    return this.request(this.getLatestArtifact.entry, args);\n  }\n\n  // Returns a list of artifacts and associated meta-data for a given run.\n  // As a task may have many artifacts paging may be necessary. If this\n  // end-point returns a `continuationToken`, you should call the end-point\n  // again with the `continuationToken` as the query-string option:\n  // `continuationToken`.\n  // By default this end-point will list up-to 1000 artifacts in a single page\n  // you may limit this with the query-string parameter `limit`.\n  listArtifacts(...args) {\n    this.validate(this.listArtifacts.entry, args);\n    return this.request(this.listArtifacts.entry, args);\n  }\n\n  // Returns a list of artifacts and associated meta-data for the latest run\n  // from the given task.\n  // As a task may have many artifacts paging may be necessary. If this\n  // end-point returns a `continuationToken`, you should call the end-point\n  // again with the `continuationToken` as the query-string option:\n  // `continuationToken`.\n  // By default this end-point will list up-to 1000 artifacts in a single page\n  // you may limit this with the query-string parameter `limit`.\n  listLatestArtifacts(...args) {\n    this.validate(this.listLatestArtifacts.entry, args);\n    return this.request(this.listLatestArtifacts.entry, args);\n  }\n\n  // Get all active provisioners.\n  // The term \"provisioner\" is taken broadly to mean anything with a provisionerId.\n  // This does not necessarily mean there is an associated service performing any\n  // provisioning activity.\n  // The response is paged. If this end-point returns a `continuationToken`, you\n  // should call the end-point again with the `continuationToken` as a query-string\n  // option. By default this end-point will list up to 1000 provisioners in a single\n  // page. You may limit this with the query-string parameter `limit`.\n  listProvisioners(...args) {\n    this.validate(this.listProvisioners.entry, args);\n    return this.request(this.listProvisioners.entry, args);\n  }\n\n  // Get an active provisioner.\n  // The term \"provisioner\" is taken broadly to mean anything with a provisionerId.\n  // This does not necessarily mean there is an associated service performing any\n  // provisioning activity.\n  getProvisioner(...args) {\n    this.validate(this.getProvisioner.entry, args);\n    return this.request(this.getProvisioner.entry, args);\n  }\n\n  // Declare a provisioner, supplying some details about it.\n  // `declareProvisioner` allows updating one or more properties of a provisioner as long as the required scopes are\n  // possessed. For example, a request to update the `aws-provisioner-v1`\n  // provisioner with a body `{description: 'This provisioner is great'}` would require you to have the scope\n  // `queue:declare-provisioner:aws-provisioner-v1#description`.\n  // The term \"provisioner\" is taken broadly to mean anything with a provisionerId.\n  // This does not necessarily mean there is an associated service performing any\n  // provisioning activity.\n  declareProvisioner(...args) {\n    this.validate(this.declareProvisioner.entry, args);\n    return this.request(this.declareProvisioner.entry, args);\n  }\n\n  // Get an approximate number of pending tasks for the given `provisionerId`\n  // and `workerType`.\n  // The underlying Azure Storage Queues only promises to give us an estimate.\n  // Furthermore, we cache the result in memory for 20 seconds. So consumers\n  // should be no means expect this to be an accurate number.\n  // It is, however, a solid estimate of the number of pending tasks.\n  pendingTasks(...args) {\n    this.validate(this.pendingTasks.entry, args);\n    return this.request(this.pendingTasks.entry, args);\n  }\n\n  // Get all active worker-types for the given provisioner.\n  // The response is paged. If this end-point returns a `continuationToken`, you\n  // should call the end-point again with the `continuationToken` as a query-string\n  // option. By default this end-point will list up to 1000 worker-types in a single\n  // page. You may limit this with the query-string parameter `limit`.\n  listWorkerTypes(...args) {\n    this.validate(this.listWorkerTypes.entry, args);\n    return this.request(this.listWorkerTypes.entry, args);\n  }\n\n  // Get a worker-type from a provisioner.\n  getWorkerType(...args) {\n    this.validate(this.getWorkerType.entry, args);\n    return this.request(this.getWorkerType.entry, args);\n  }\n\n  // Declare a workerType, supplying some details about it.\n  // `declareWorkerType` allows updating one or more properties of a worker-type as long as the required scopes are\n  // possessed. For example, a request to update the `gecko-b-1-w2008` worker-type within the `aws-provisioner-v1`\n  // provisioner with a body `{description: 'This worker type is great'}` would require you to have the scope\n  // `queue:declare-worker-type:aws-provisioner-v1/gecko-b-1-w2008#description`.\n  declareWorkerType(...args) {\n    this.validate(this.declareWorkerType.entry, args);\n    return this.request(this.declareWorkerType.entry, args);\n  }\n\n  // Get a list of all active workers of a workerType.\n  // `listWorkers` allows a response to be filtered by quarantined and non quarantined workers.\n  // To filter the query, you should call the end-point with `quarantined` as a query-string option with a\n  // true or false value.\n  // The response is paged. If this end-point returns a `continuationToken`, you\n  // should call the end-point again with the `continuationToken` as a query-string\n  // option. By default this end-point will list up to 1000 workers in a single\n  // page. You may limit this with the query-string parameter `limit`.\n  listWorkers(...args) {\n    this.validate(this.listWorkers.entry, args);\n    return this.request(this.listWorkers.entry, args);\n  }\n\n  // Get a worker from a worker-type.\n  getWorker(...args) {\n    this.validate(this.getWorker.entry, args);\n    return this.request(this.getWorker.entry, args);\n  }\n\n  // Quarantine a worker\n  quarantineWorker(...args) {\n    this.validate(this.quarantineWorker.entry, args);\n    return this.request(this.quarantineWorker.entry, args);\n  }\n\n  // Declare a worker, supplying some details about it.\n  // `declareWorker` allows updating one or more properties of a worker as long as the required scopes are\n  // possessed.\n  declareWorker(...args) {\n    this.validate(this.declareWorker.entry, args);\n    return this.request(this.declareWorker.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Queue.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class QueueEvents extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: '',\n      exchangePrefix: 'exchange/taskcluster-queue/v1/',\n      ...options\n    });\n  }\n\n  // When a task is created or just defined a message is posted to this\n  // exchange.\n  // This message exchange is mainly useful when tasks are scheduled by a\n  // scheduler that uses `defineTask` as this does not make the task\n  // `pending`. Thus, no `taskPending` message is published.\n  // Please, note that messages are also published on this exchange if defined\n  // using `createTask`.\n  taskDefined(pattern) {\n    const entry = {type:'topic-exchange',exchange:'task-defined',name:'taskDefined',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskId',multipleWords:false,required:true},{name:'runId',multipleWords:false,required:false},{name:'workerGroup',multipleWords:false,required:false},{name:'workerId',multipleWords:false,required:false},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // When a task becomes `pending` a message is posted to this exchange.\n  // This is useful for workers who doesn't want to constantly poll the queue\n  // for new tasks. The queue will also be authority for task states and\n  // claims. But using this exchange workers should be able to distribute work\n  // efficiently and they would be able to reduce their polling interval\n  // significantly without affecting general responsiveness.\n  taskPending(pattern) {\n    const entry = {type:'topic-exchange',exchange:'task-pending',name:'taskPending',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskId',multipleWords:false,required:true},{name:'runId',multipleWords:false,required:true},{name:'workerGroup',multipleWords:false,required:false},{name:'workerId',multipleWords:false,required:false},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Whenever a task is claimed by a worker, a run is started on the worker,\n  // and a message is posted on this exchange.\n  taskRunning(pattern) {\n    const entry = {type:'topic-exchange',exchange:'task-running',name:'taskRunning',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskId',multipleWords:false,required:true},{name:'runId',multipleWords:false,required:true},{name:'workerGroup',multipleWords:false,required:true},{name:'workerId',multipleWords:false,required:true},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/task-running-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Whenever the `createArtifact` end-point is called, the queue will create\n  // a record of the artifact and post a message on this exchange. All of this\n  // happens before the queue returns a signed URL for the caller to upload\n  // the actual artifact with (pending on `storageType`).\n  // This means that the actual artifact is rarely available when this message\n  // is posted. But it is not unreasonable to assume that the artifact will\n  // will become available at some point later. Most signatures will expire in\n  // 30 minutes or so, forcing the uploader to call `createArtifact` with\n  // the same payload again in-order to continue uploading the artifact.\n  // However, in most cases (especially for small artifacts) it's very\n  // reasonable assume the artifact will be available within a few minutes.\n  // This property means that this exchange is mostly useful for tools\n  // monitoring task evaluation. One could also use it count number of\n  // artifacts per task, or _index_ artifacts though in most cases it'll be\n  // smarter to index artifacts after the task in question have completed\n  // successfully.\n  artifactCreated(pattern) {\n    const entry = {type:'topic-exchange',exchange:'artifact-created',name:'artifactCreated',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskId',multipleWords:false,required:true},{name:'runId',multipleWords:false,required:true},{name:'workerGroup',multipleWords:false,required:true},{name:'workerId',multipleWords:false,required:true},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // When a task is successfully completed by a worker a message is posted\n  // this exchange.\n  // This message is routed using the `runId`, `workerGroup` and `workerId`\n  // that completed the task. But information about additional runs is also\n  // available from the task status structure.\n  taskCompleted(pattern) {\n    const entry = {type:'topic-exchange',exchange:'task-completed',name:'taskCompleted',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskId',multipleWords:false,required:true},{name:'runId',multipleWords:false,required:true},{name:'workerGroup',multipleWords:false,required:true},{name:'workerId',multipleWords:false,required:true},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // When a task ran, but failed to complete successfully a message is posted\n  // to this exchange. This is same as worker ran task-specific code, but the\n  // task specific code exited non-zero.\n  taskFailed(pattern) {\n    const entry = {type:'topic-exchange',exchange:'task-failed',name:'taskFailed',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskId',multipleWords:false,required:true},{name:'runId',multipleWords:false,required:false},{name:'workerGroup',multipleWords:false,required:false},{name:'workerId',multipleWords:false,required:false},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // Whenever Taskcluster fails to run a message is posted to this exchange.\n  // This happens if the task isn't completed before its `deadlìne`,\n  // all retries failed (i.e. workers stopped responding), the task was\n  // canceled by another entity, or the task carried a malformed payload.\n  // The specific _reason_ is evident from that task status structure, refer\n  // to the `reasonResolved` property for the last run.\n  taskException(pattern) {\n    const entry = {type:'topic-exchange',exchange:'task-exception',name:'taskException',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskId',multipleWords:false,required:true},{name:'runId',multipleWords:false,required:false},{name:'workerGroup',multipleWords:false,required:false},{name:'workerId',multipleWords:false,required:false},{name:'provisionerId',multipleWords:false,required:true},{name:'workerType',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n\n  // A message is published on task-group-resolved whenever all submitted\n  // tasks (whether scheduled or unscheduled) for a given task group have\n  // been resolved, regardless of whether they resolved as successful or\n  // not. A task group may be resolved multiple times, since new tasks may\n  // be submitted against an already resolved task group.\n  taskGroupResolved(pattern) {\n    const entry = {type:'topic-exchange',exchange:'task-group-resolved',name:'taskGroupResolved',routingKey:[{name:'routingKeyKind',constant:'primary',multipleWords:false,required:true},{name:'taskGroupId',multipleWords:false,required:true},{name:'schedulerId',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/QueueEvents.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class Secrets extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: 'https://secrets.taskcluster.net/v1',\n      exchangePrefix: '',\n      ...options\n    });\n    this.set.entry = {type:'function',method:'put',route:'/secret/<name>',query:[],args:['name'],name:'set',stability:'stable',scopes:[['secrets:set:<name>']],input:true}; // eslint-disable-line\n    this.remove.entry = {type:'function',method:'delete',route:'/secret/<name>',query:[],args:['name'],name:'remove',stability:'stable',scopes:[['secrets:set:<name>']]}; // eslint-disable-line\n    this.get.entry = {type:'function',method:'get',route:'/secret/<name>',query:[],args:['name'],name:'get',stability:'stable',scopes:[['secrets:get:<name>']],output:true}; // eslint-disable-line\n    this.list.entry = {type:'function',method:'get',route:'/secrets',query:['continuationToken','limit'],args:[],name:'list',stability:'stable',output:true}; // eslint-disable-line\n    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line\n  }\n\n  // Set the secret associated with some key.  If the secret already exists, it is\n  // updated instead.\n  set(...args) {\n    this.validate(this.set.entry, args);\n    return this.request(this.set.entry, args);\n  }\n\n  // Delete the secret associated with some key.\n  remove(...args) {\n    this.validate(this.remove.entry, args);\n    return this.request(this.remove.entry, args);\n  }\n\n  // Read the secret associated with some key.  If the secret has recently\n  // expired, the response code 410 is returned.  If the caller lacks the\n  // scope necessary to get the secret, the call will fail with a 403 code\n  // regardless of whether the secret exists.\n  get(...args) {\n    this.validate(this.get.entry, args);\n    return this.request(this.get.entry, args);\n  }\n\n  // List the names of all secrets.\n  // By default this end-point will try to return up to 1000 secret names in one\n  // request. But it **may return less**, even if more tasks are available.\n  // It may also return a `continuationToken` even though there are no more\n  // results. However, you can only be sure to have seen all results if you\n  // keep calling `listTaskGroup` with the last `continuationToken` until you\n  // get a result without a `continuationToken`.\n  // If you are not interested in listing all the members at once, you may\n  // use the query-string option `limit` to return fewer.\n  list(...args) {\n    this.validate(this.list.entry, args);\n    return this.request(this.list.entry, args);\n  }\n\n  // Respond without doing anything.\n  // This endpoint is used to check that the service is up.\n  ping(...args) {\n    this.validate(this.ping.entry, args);\n    return this.request(this.ping.entry, args);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/Secrets.js","// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nimport Client from '../Client';\n\nexport default class TreeherderEvents extends Client {\n  constructor(options = {}) {\n    super({\n      baseUrl: '',\n      exchangePrefix: 'exchange/taskcluster-treeherder/v1/',\n      ...options\n    });\n  }\n\n  // When a task run is scheduled or resolved, a message is posted to\n  // this exchange in a Treeherder consumable format.\n  jobs(pattern) {\n    const entry = {type:'topic-exchange',exchange:'jobs',name:'jobs',routingKey:[{name:'destination',multipleWords:false,required:true},{name:'project',multipleWords:false,required:true},{name:'reserved',multipleWords:true,required:false}],schema:'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#'}; // eslint-disable-line\n\n    return this.normalizePattern(entry, pattern);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clients/TreeherderEvents.js","import hawk from 'hawk';\nimport { v4 } from './utils';\nimport Auth from './clients/Auth';\n\nconst THIRTY_ONE_DAYS = 31 * 24 * 60 * 60 * 1000;\nconst createHmac = (...args) => hawk.crypto.utils.algo.HMAC.create(...args);\nconst sha256 = hawk.crypto.utils.algo.SHA256;\nconst base64 = hawk.crypto.utils.enc.Base64;\n\n/**\n * Construct a set of temporary credentials.\n *\n * options:\n * {\n *  start:        new Date(),   // Start time of credentials (defaults to now)\n *  expiry:       new Date(),   // Credentials expiration time\n *  scopes:       ['scope'...], // Scopes granted (defaults to empty-set)\n *  clientId:     '...',  // *optional* name to create named temporary credential\n *  credentials: {        // (defaults to use global config, if available)\n *    clientId:    '...', // ClientId\n *    accessToken: '...', // AccessToken for clientId\n *  },\n * }\n *\n * Note that a named temporary credential is only valid if the issuing credentials\n * have the scope 'auth:create-client:<name>'.  This function does not check for\n * this scope, but it will be checked when the credentials are used.\n *\n * The auth service already tolerates up to five minutes clock drift for start\n * and expiry fields, therefore caller should *not* apply further clock skew\n * adjustment.\n *\n * Returns an object on the form: {clientId, accessToken, certificate}\n */\nexport const createTemporaryCredentials = (opts) => {\n  if (!opts) {\n    throw new Error('Missing required options');\n  }\n\n  // auth service handles clock drift (PR #117) - should not skew times here\n  const now = new Date();\n  const options = { start: now, scopes: [], ...opts };\n  const isNamed = !!options.clientId;\n\n  if (!options.credentials) {\n    throw new Error('options.credentials is required');\n  }\n\n  if (!options.credentials.clientId) {\n    throw new Error('options.credentials.clientId is required');\n  }\n\n  if (isNamed && options.clientId === options.credentials.clientId) {\n    throw new Error('Credential issuer must be different from the name');\n  }\n\n  if (!options.credentials.accessToken) {\n    throw new Error('options.credentials.accessToken is required');\n  }\n\n  if (options.credentials.certificate != null) {\n    throw new Error(`Temporary credentials cannot be used to make new temporary credentials.\n      Ensure that options.credentials.certificate is null.`);\n  }\n\n  if (!(options.start instanceof Date)) {\n    throw new Error('options.start must be a Date object');\n  }\n\n  if (!(options.expiry instanceof Date)) {\n    throw new Error('options.expiry must be a Date object');\n  }\n\n  if (+options.expiry - options.start > THIRTY_ONE_DAYS) {\n    throw new Error('Credentials cannot span more than 31 days');\n  }\n\n  if (!Array.isArray(options.scopes)) {\n    throw new Error('options.scopes must be an array');\n  }\n\n  options.scopes.forEach((scope) => {\n    if (typeof scope !== 'string') {\n      throw new Error('options.scopes must be an array of strings');\n    }\n  });\n\n  const certificate = {\n    version: 1,\n    scopes: [...options.scopes],\n    start: options.start.getTime(),\n    expiry: options.expiry.getTime(),\n    seed: v4() + v4(),\n    signature: null,\n    issuer: isNamed ? options.credentials.clientId : null\n  };\n\n  const signature = createHmac(sha256, options.credentials.accessToken);\n\n  signature.update(`version:${certificate.version}\\n`);\n\n  if (isNamed) {\n    signature.update(`clientId:${options.clientId}\\n`);\n    signature.update(`issuer:${options.credentials.clientId}\\n`);\n  }\n\n  signature.update(`seed:${certificate.seed}\\n`);\n  signature.update(`start:${certificate.start}\\n`);\n  signature.update(`expiry:${certificate.expiry}\\n`);\n  signature.update('scopes:\\n');\n  signature.update(certificate.scopes.join('\\n'));\n  certificate.signature = signature.finalize().toString(base64);\n\n  const accessToken = createHmac(sha256, options.credentials.accessToken)\n    .update(certificate.seed)\n    .finalize()\n    .toString(base64)\n    .replace(/\\+/g, '-') // Replace + with - (see RFC 4648, sec. 5)\n    .replace(/\\//g, '_') // Replace / with _ (see RFC 4648, sec. 5)\n    .replace(/=/g, ''); // Drop '==' padding\n\n  return {\n    accessToken,\n    clientId: isNamed ? options.clientId : options.credentials.clientId,\n    certificate: JSON.stringify(certificate)\n  };\n};\n\n/**\n * Get information about a set of credentials.\n *\n * credentials: {\n *   clientId,\n *   accessToken,\n *   certificate,           // optional\n * }\n *\n * result: Promise for\n * {\n *    clientId: ..,         // name of the credential\n *    type: ..,             // type of credential, e.g., \"temporary\"\n *    active: ..,           // active (valid, not disabled, etc.)\n *    start: ..,            // validity start time (if applicable)\n *    expiry: ..,           // validity end time (if applicable)\n *    scopes: [...],        // associated scopes (if available)\n * }\n */\nexport const credentialInformation = async (credentials) => {\n  let issuer = credentials.clientId;\n  const result = {\n    clientId: issuer,\n    active: true\n  };\n\n  // Distinguish permanent credentials from temporary credentials\n  if (credentials.certificate) {\n    let certificate = credentials.certificate;\n\n    if (typeof certificate === 'string') {\n      try {\n        certificate = JSON.parse(certificate);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n\n    result.type = 'temporary';\n    result.scopes = certificate.scopes;\n    result.start = new Date(certificate.start);\n    result.expiry = new Date(certificate.expiry);\n\n    if (certificate.issuer) {\n      issuer = certificate.issuer;\n    }\n  } else {\n    result.type = 'permanent';\n  }\n\n  const anonymousClient = new Auth();\n  const credentialsClient = new Auth({ credentials });\n  const clientLookup = anonymousClient\n    .client(issuer)\n    .then((client) => {\n      const expires = new Date(client.expires);\n\n      if (!result.expiry || result.expiry > expires) {\n        result.expiry = expires;\n      }\n\n      if (client.disabled) {\n        result.active = false;\n      }\n    });\n  const scopeLookup = credentialsClient\n    .currentScopes()\n    .then((response) => {\n      result.scopes = response.scopes;\n    });\n\n  await Promise.all([clientLookup, scopeLookup]);\n\n  const now = new Date();\n\n  if (result.start && result.start > now) {\n    result.active = false;\n  } else if (result.expiry && result.expiry < now) {\n    result.active = false;\n  }\n\n  return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/credentials.js","/**\n * The MIT License (MIT)\n Copyright 2016 Andrey Sitnik <andrey@sitnik.ru>\n Permission is hereby granted, free of charge, to any person obtaining a copy of\n this software and associated documentation files (the \"Software\"), to deal in\n the Software without restriction, including without limitation the rights to\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n the Software, and to permit persons to whom the Software is furnished to do so,\n subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nexport default class Emitter {\n  events = {};\n\n  on(eventName, handler) {\n    if (process.env.NODE_ENV !== 'production' && typeof handler !== 'function') {\n      throw new Error('Listener must be a function');\n    }\n\n    const event = this.events[eventName] || [];\n\n    event.push(handler);\n    this.events[eventName] = event;\n\n    return () => this.off(eventName, handler);\n  }\n\n  off(eventName, handler) {\n    const event = this.events[eventName] || [];\n\n    event.splice(event.indexOf(handler) >>> 0, 1); // eslint-disable-line no-bitwise\n  }\n\n  emit(eventName, ...args) {\n    const handlers = this.events[eventName];\n\n    if (!handlers || !handlers[0]) {\n      return;\n    }\n\n    handlers.forEach(handler => handler(...args));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/emitter.js","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"query-string\",\"commonjs2\":\"query-string\",\"amd\":\"query-string\",\"root\":\"queryString\"}\n// module id = 26\n// module chunks = 0"],"sourceRoot":""}