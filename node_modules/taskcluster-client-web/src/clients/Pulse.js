// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import Client from '../Client';

export default class Pulse extends Client {
  constructor(options = {}) {
    super({
      baseUrl: 'https://pulse.taskcluster.net/v1',
      exchangePrefix: '',
      ...options
    });
    this.overview.entry = {type:'function',method:'get',route:'/overview',query:[],args:[],name:'overview',stability:'experimental',output:true}; // eslint-disable-line
    this.listNamespaces.entry = {type:'function',method:'get',route:'/namespaces',query:['limit','continuation'],args:[],name:'listNamespaces',stability:'experimental',output:true}; // eslint-disable-line
    this.namespace.entry = {type:'function',method:'get',route:'/namespace/<namespace>',query:[],args:['namespace'],name:'namespace',stability:'experimental',output:true}; // eslint-disable-line
    this.claimNamespace.entry = {type:'function',method:'post',route:'/namespace/<namespace>',query:[],args:['namespace'],name:'claimNamespace',stability:'experimental',scopes:[['pulse:namespace:<namespace>']],input:true,output:true}; // eslint-disable-line
    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line
  }

  // Get an overview of the Rabbit cluster.
  overview(...args) {
    this.validate(this.overview.entry, args);
    return this.request(this.overview.entry, args);
  }

  // List the namespaces managed by this service.
  // This will list up to 1000 namespaces. If more namespaces are present a
  // `continuationToken` will be returned, which can be given in the next
  // request. For the initial request, do not provide continuation.
  listNamespaces(...args) {
    this.validate(this.listNamespaces.entry, args);
    return this.request(this.listNamespaces.entry, args);
  }

  // Get public information about a single namespace. This is the same information
  // as returned by `listNamespaces`.
  namespace(...args) {
    this.validate(this.namespace.entry, args);
    return this.request(this.namespace.entry, args);
  }

  // Claim a namespace, returning a username and password with access to that
  // namespace good for a short time.  Clients should call this endpoint again
  // at the re-claim time given in the response, as the password will be rotated
  // soon after that time.  The namespace will expire, and any associated queues
  // and exchanges will be deleted, at the given expiration time.
  // The `expires` and `contact` properties can be updated at any time in a reclaim
  // operation.
  claimNamespace(...args) {
    this.validate(this.claimNamespace.entry, args);
    return this.request(this.claimNamespace.entry, args);
  }

  // Respond without doing anything.
  // This endpoint is used to check that the service is up.
  ping(...args) {
    this.validate(this.ping.entry, args);
    return this.request(this.ping.entry, args);
  }
}
