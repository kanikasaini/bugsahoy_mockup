{
  "version": 3,
  "sources": [
    "scopes.js"
  ],
  "names": [
    "assert",
    "require",
    "_validScope",
    "exports",
    "validScope",
    "scope",
    "test",
    "validateScopeSets",
    "scopesets",
    "msg",
    "Array",
    "isArray",
    "every",
    "conj",
    "validateScopePatterns",
    "scopePatterns",
    "scopeMatch",
    "some",
    "scopeset",
    "pattern",
    "indexOf",
    "slice",
    "scopeIntersection",
    "scopeset1",
    "scopeset2",
    "filter",
    "s",
    "v",
    "i",
    "a"
  ],
  "mappings": ";;;;;;;;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;;AAEA;;;;;;AAMA,IAAIC,cAAc,gBAAlB;AACAC,QAAQC,UAAR,GAAqB,UAASC,KAAT,EAAgB;AACnC,SAAO,OAAOA,KAAP,IAAgB,QAAhB,IAA4BH,YAAYI,IAAZ,CAAiBD,KAAjB,CAAnC;AACD,CAFD;;AAIA;;;;AAIAF,QAAQI,iBAAR,GAA4B,UAASC,SAAT,EAAoB;AAC9C,MAAIC,MAAM,kDACA,2BADV;AAEAT,SAAOU,MAAMC,OAAN,CAAcH,SAAd,CAAP,EAAiCC,GAAjC;AACAT,SAAOQ,UAAUI,KAAV,CAAgB,UAASC,IAAT,EAAe;AACpC,WAAOH,MAAMC,OAAN,CAAcE,IAAd,KAAuBA,KAAKD,KAAL,CAAWT,QAAQC,UAAnB,CAA9B;AACD,GAFM,CAAP,EAEIK,GAFJ;AAGD,CAPD;;AASA,SAASK,qBAAT,CAA+BC,aAA/B,EAA8C;AAC5Cf,SAAOe,yBAAyBL,KAAzB,IAAkCK,cAAcH,KAAd,CAAoB,UAACP,KAAD,EAAW;AACtE,WAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD,GAFwC,CAAzC,EAEI,oCAFJ;AAGD;;AAED;;;;;;;;;;;;AAYAF,QAAQa,UAAR,GAAqB,UAASD,aAAT,EAAwBP,SAAxB,EAAmC;AACtDL,UAAQI,iBAAR,CAA0BC,SAA1B;AACAM,wBAAsBC,aAAtB;;AAEA,SAAOP,UAAUS,IAAV,CAAe,UAASC,QAAT,EAAmB;AACvC,WAAOA,SAASN,KAAT,CAAe,UAASP,KAAT,EAAgB;AACpC,aAAOU,cAAcE,IAAd,CAAmB,UAASE,OAAT,EAAkB;AAC1C,YAAId,UAAUc,OAAd,EAAuB;AACrB,iBAAO,IAAP;AACD;AACD,YAAI,MAAMb,IAAN,CAAWa,OAAX,CAAJ,EAAyB;AACvB,iBAAOd,MAAMe,OAAN,CAAcD,QAAQE,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAd,MAAwC,CAA/C;AACD;AACD,eAAO,KAAP;AACD,OARM,CAAP;AASD,KAVM,CAAP;AAWD,GAZM,CAAP;AAaD,CAjBD;;AAmBA;;;AAGAlB,QAAQmB,iBAAR,GAA4B,UAACC,SAAD,EAAYC,SAAZ;AAAA,SAA0B,2CACjDD,UAAUE,MAAV,CAAiB;AAAA,WAAKtB,QAAQa,UAAR,CAAmBQ,SAAnB,EAA8B,CAAC,CAACE,CAAD,CAAD,CAA9B,CAAL;AAAA,GAAjB,CADiD,oCAEjDF,UAAUC,MAAV,CAAiB;AAAA,WAAKtB,QAAQa,UAAR,CAAmBO,SAAnB,EAA8B,CAAC,CAACG,CAAD,CAAD,CAA9B,CAAL;AAAA,GAAjB,CAFiD,GAGpDD,MAHoD,CAG7C,UAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP;AAAA,WAAaA,EAAET,OAAF,CAAUO,CAAV,MAAiBC,CAA9B;AAAA,GAH6C,CAA1B;AAAA,CAA5B",
  "file": "scopes.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "let assert = require('assert');\n\n/**\n * Determine whether a scope is valid.  Scopes must be strings of ASCII\n * characters 0x20-0x7e (printable characters, including space but no other\n * whitespace)\n */\n\nlet _validScope = /^[\\x20-\\x7e]*$/;\nexports.validScope = function(scope) {\n  return typeof scope == 'string' && _validScope.test(scope);\n};\n\n/**\n * Validate scope-sets for well-formedness.  See scopeMatch for the description\n * of a scope-set.\n */\nexports.validateScopeSets = function(scopesets) {\n  let msg = 'scopes must be an array of arrays of strings ' +\n            '(disjunctive normal form)';\n  assert(Array.isArray(scopesets), msg);\n  assert(scopesets.every(function(conj) {\n    return Array.isArray(conj) && conj.every(exports.validScope);\n  }), msg);\n};\n\nfunction validateScopePatterns(scopePatterns) {\n  assert(scopePatterns instanceof Array && scopePatterns.every((scope) => {\n    return typeof scope === 'string';\n  }), 'scopes must be an array of strings');\n}\n\n/**\n * Auxiliary function to check if scopePatterns satisfies a scope-set\n *\n * Note that scopesets is an array of arrays of strings. For example:\n *  [['a', 'b'], ['c']]\n *\n * Is satisfied if either,\n *  i)  'a' and 'b' is satisfied, or\n *  ii) 'c' is satisfied.\n *\n * Also expressed as ('a' and 'b') or 'c'.\n */\nexports.scopeMatch = function(scopePatterns, scopesets) {\n  exports.validateScopeSets(scopesets);\n  validateScopePatterns(scopePatterns);\n\n  return scopesets.some(function(scopeset) {\n    return scopeset.every(function(scope) {\n      return scopePatterns.some(function(pattern) {\n        if (scope === pattern) {\n          return true;\n        }\n        if (/\\*$/.test(pattern)) {\n          return scope.indexOf(pattern.slice(0, -1)) === 0;\n        }\n        return false;\n      });\n    });\n  });\n};\n\n/**\n * Finds scope intersections between two scope sets.\n */\nexports.scopeIntersection = (scopeset1, scopeset2) => [\n  ...scopeset1.filter(s => exports.scopeMatch(scopeset2, [[s]])),\n  ...scopeset2.filter(s => exports.scopeMatch(scopeset1, [[s]])),\n].filter((v, i, a) => a.indexOf(v) === i);\n"
  ]
}
